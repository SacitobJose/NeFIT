%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.0
-module(protos).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_Authentication.AuthType'/1, 'enum_value_by_symbol_Authentication.AuthType'/1]).
-export(['enum_symbol_by_value_Authentication.UserType'/1, 'enum_value_by_symbol_Authentication.UserType'/1]).
-export(['enum_symbol_by_value_GETEntities.Type'/1, 'enum_value_by_symbol_GETEntities.Type'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("protos.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'Authentication.AuthType'() :: 'REGISTER' | 'LOGIN'.
-type 'Authentication.UserType'() :: 'PRODUCER' | 'IMPORTER'.
-type 'GETEntities.Type'() :: 'PRODUCERS' | 'IMPORTERS'.
-export_type(['Authentication.AuthType'/0, 'Authentication.UserType'/0, 'GETEntities.Type'/0]).

%% message types
-type 'Authentication'() :: #'Authentication'{}.

-type 'Transaction'() :: #'Transaction'{}.

-type 'Produce'() :: #'Produce'{}.

-type 'Import'() :: #'Import'{}.

-type 'ServerResponse'() :: #'ServerResponse'{}.

-type 'CatalogRequest'() :: #'CatalogRequest'{}.

-type 'POSTNegotiation'() :: #'POSTNegotiation'{}.

-type 'DELETENegotiation'() :: #'DELETENegotiation'{}.

-type 'GETEntities'() :: #'GETEntities'{}.

-type 'GETEntitiesResponse'() :: #'GETEntitiesResponse'{}.

-type 'GETProducerInfo'() :: #'GETProducerInfo'{}.

-type 'GETProducerInfoResponse'() :: #'GETProducerInfoResponse'{}.

-type 'Subscribe'() :: #'Subscribe'{}.

-type 'Unsubscribe'() :: #'Unsubscribe'{}.

-export_type(['Authentication'/0, 'Transaction'/0, 'Produce'/0, 'Import'/0, 'ServerResponse'/0, 'CatalogRequest'/0, 'POSTNegotiation'/0, 'DELETENegotiation'/0, 'GETEntities'/0, 'GETEntitiesResponse'/0, 'GETProducerInfo'/0, 'GETProducerInfoResponse'/0, 'Subscribe'/0, 'Unsubscribe'/0]).

-spec encode_msg(#'Authentication'{} | #'Transaction'{} | #'Produce'{} | #'Import'{} | #'ServerResponse'{} | #'CatalogRequest'{} | #'POSTNegotiation'{} | #'DELETENegotiation'{} | #'GETEntities'{} | #'GETEntitiesResponse'{} | #'GETProducerInfo'{} | #'GETProducerInfoResponse'{} | #'Subscribe'{} | #'Unsubscribe'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'Authentication'{} | #'Transaction'{} | #'Produce'{} | #'Import'{} | #'ServerResponse'{} | #'CatalogRequest'{} | #'POSTNegotiation'{} | #'DELETENegotiation'{} | #'GETEntities'{} | #'GETEntitiesResponse'{} | #'GETProducerInfo'{} | #'GETProducerInfoResponse'{} | #'Subscribe'{} | #'Unsubscribe'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'Authentication'{} | #'Transaction'{} | #'Produce'{} | #'Import'{} | #'ServerResponse'{} | #'CatalogRequest'{} | #'POSTNegotiation'{} | #'DELETENegotiation'{} | #'GETEntities'{} | #'GETEntitiesResponse'{} | #'GETProducerInfo'{} | #'GETProducerInfoResponse'{} | #'Subscribe'{} | #'Unsubscribe'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Authentication' ->
	  encode_msg_Authentication(id(Msg, TrUserData),
				    TrUserData);
      'Transaction' ->
	  encode_msg_Transaction(id(Msg, TrUserData), TrUserData);
      'Produce' ->
	  encode_msg_Produce(id(Msg, TrUserData), TrUserData);
      'Import' ->
	  encode_msg_Import(id(Msg, TrUserData), TrUserData);
      'ServerResponse' ->
	  encode_msg_ServerResponse(id(Msg, TrUserData),
				    TrUserData);
      'CatalogRequest' ->
	  encode_msg_CatalogRequest(id(Msg, TrUserData),
				    TrUserData);
      'POSTNegotiation' ->
	  encode_msg_POSTNegotiation(id(Msg, TrUserData),
				     TrUserData);
      'DELETENegotiation' ->
	  encode_msg_DELETENegotiation(id(Msg, TrUserData),
				       TrUserData);
      'GETEntities' ->
	  encode_msg_GETEntities(id(Msg, TrUserData), TrUserData);
      'GETEntitiesResponse' ->
	  encode_msg_GETEntitiesResponse(id(Msg, TrUserData),
					 TrUserData);
      'GETProducerInfo' ->
	  encode_msg_GETProducerInfo(id(Msg, TrUserData),
				     TrUserData);
      'GETProducerInfoResponse' ->
	  encode_msg_GETProducerInfoResponse(id(Msg, TrUserData),
					     TrUserData);
      'Subscribe' ->
	  encode_msg_Subscribe(id(Msg, TrUserData), TrUserData);
      'Unsubscribe' ->
	  encode_msg_Unsubscribe(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_Authentication(Msg, TrUserData) ->
    encode_msg_Authentication(Msg, <<>>, TrUserData).


encode_msg_Authentication(#'Authentication'{type = F1,
					    userType = F2, username = F3,
					    password = F4},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   'e_enum_Authentication.AuthType'(TrF1,
					    <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   'e_enum_Authentication.UserType'(TrF2,
					    <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
    end.

encode_msg_Transaction(Msg, TrUserData) ->
    encode_msg_Transaction(Msg, <<>>, TrUserData).


encode_msg_Transaction(#'Transaction'{txn = F1}, Bin,
		       TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {produce, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Transaction_produce(TrTF1, <<Bin/binary, 10>>,
						TrUserData)
		 end;
	     {import, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_Transaction_import(TrTF1, <<Bin/binary, 18>>,
					       TrUserData)
		 end
	   end
    end.

encode_msg_Produce(Msg, TrUserData) ->
    encode_msg_Produce(Msg, <<>>, TrUserData).


encode_msg_Produce(#'Produce'{productName = F1,
			      producerName = F2, minimumAmount = F3,
			      maximumAmount = F4, minimumUnitaryPrice = F5,
			      negotiationPeriod = F6},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int64(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      e_type_int64(TrF6, <<B5/binary, 48>>, TrUserData)
    end.

encode_msg_Import(Msg, TrUserData) ->
    encode_msg_Import(Msg, <<>>, TrUserData).


encode_msg_Import(#'Import'{productName = F1,
			    producerName = F2, importerName = F3, quantity = F4,
			    unitaryPrice = F5},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int64(TrF5, <<B4/binary, 40>>, TrUserData)
    end.

encode_msg_ServerResponse(Msg, TrUserData) ->
    encode_msg_ServerResponse(Msg, <<>>, TrUserData).


encode_msg_ServerResponse(#'ServerResponse'{success =
						F1},
			  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_CatalogRequest(Msg, TrUserData) ->
    encode_msg_CatalogRequest(Msg, <<>>, TrUserData).


encode_msg_CatalogRequest(#'CatalogRequest'{request =
						F1},
			  Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {nn, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_CatalogRequest_nn(TrTF1, <<Bin/binary, 10>>,
					      TrUserData)
		 end;
	     {no, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_CatalogRequest_no(TrTF1, <<Bin/binary, 18>>,
					      TrUserData)
		 end;
	     {gpi, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_CatalogRequest_gpi(TrTF1, <<Bin/binary, 26>>,
					       TrUserData)
		 end;
	     {ge, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_CatalogRequest_ge(TrTF1, <<Bin/binary, 34>>,
					      TrUserData)
		 end;
	     {sub, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_CatalogRequest_sub(TrTF1, <<Bin/binary, 42>>,
					       TrUserData)
		 end;
	     {unsub, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_CatalogRequest_unsub(TrTF1, <<Bin/binary, 50>>,
						 TrUserData)
		 end
	   end
    end.

encode_msg_POSTNegotiation(Msg, TrUserData) ->
    encode_msg_POSTNegotiation(Msg, <<>>, TrUserData).


encode_msg_POSTNegotiation(#'POSTNegotiation'{productName
						  = F1,
					      producerName = F2,
					      minimumAmount = F3,
					      maximumAmount = F4,
					      minimumUnitaryPrice = F5,
					      negotiationPeriod = F6},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int64(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      e_type_int64(TrF6, <<B5/binary, 48>>, TrUserData)
    end.

encode_msg_DELETENegotiation(Msg, TrUserData) ->
    encode_msg_DELETENegotiation(Msg, <<>>, TrUserData).


encode_msg_DELETENegotiation(#'DELETENegotiation'{productName
						      = F1,
						  producerName = F2},
			     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_GETEntities(Msg, TrUserData) ->
    encode_msg_GETEntities(Msg, <<>>, TrUserData).


encode_msg_GETEntities(#'GETEntities'{'Entities' = F1},
		       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      'e_enum_GETEntities.Type'(TrF1, <<Bin/binary, 8>>,
				TrUserData)
    end.

encode_msg_GETEntitiesResponse(Msg, TrUserData) ->
    encode_msg_GETEntitiesResponse(Msg, <<>>, TrUserData).


encode_msg_GETEntitiesResponse(#'GETEntitiesResponse'{entities
							  = F1},
			       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GETEntitiesResponse_entities(TrF1, Bin,
						  TrUserData)
      end
    end.

encode_msg_GETProducerInfo(Msg, TrUserData) ->
    encode_msg_GETProducerInfo(Msg, <<>>, TrUserData).


encode_msg_GETProducerInfo(#'GETProducerInfo'{username =
						  F1,
					      producerName = F2},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_GETProducerInfoResponse(Msg, TrUserData) ->
    encode_msg_GETProducerInfoResponse(Msg, <<>>,
				       TrUserData).


encode_msg_GETProducerInfoResponse(#'GETProducerInfoResponse'{negotiations
								  = F1},
				   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_GETProducerInfoResponse_negotiations(TrF1, Bin,
							  TrUserData)
      end
    end.

encode_msg_Subscribe(Msg, TrUserData) ->
    encode_msg_Subscribe(Msg, <<>>, TrUserData).


encode_msg_Subscribe(#'Subscribe'{username = F1,
				  producerName = F2, productName = F3},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

encode_msg_Unsubscribe(Msg, TrUserData) ->
    encode_msg_Unsubscribe(Msg, <<>>, TrUserData).


encode_msg_Unsubscribe(#'Unsubscribe'{username = F1,
				      producerName = F2, productName = F3},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

e_mfield_Transaction_produce(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Produce(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Transaction_import(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Import(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CatalogRequest_nn(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_POSTNegotiation(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CatalogRequest_no(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_DELETENegotiation(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CatalogRequest_gpi(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_GETProducerInfo(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CatalogRequest_ge(Msg, Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 2>>,
    encode_msg_GETEntities(Msg, Bin2, TrUserData).

e_mfield_CatalogRequest_sub(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Subscribe(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_CatalogRequest_unsub(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Unsubscribe(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GETEntitiesResponse_entities([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_GETEntitiesResponse_entities(Rest, Bin3,
					 TrUserData);
e_field_GETEntitiesResponse_entities([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_GETProducerInfoResponse_negotiations(Msg, Bin,
					      TrUserData) ->
    SubBin = encode_msg_POSTNegotiation(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GETProducerInfoResponse_negotiations([Elem
					      | Rest],
					     Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_GETProducerInfoResponse_negotiations(id(Elem,
							 TrUserData),
						      Bin2, TrUserData),
    e_field_GETProducerInfoResponse_negotiations(Rest, Bin3,
						 TrUserData);
e_field_GETProducerInfoResponse_negotiations([], Bin,
					     _TrUserData) ->
    Bin.

'e_enum_Authentication.AuthType'('REGISTER', Bin,
				 _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_Authentication.AuthType'('LOGIN', Bin,
				 _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Authentication.AuthType'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_Authentication.UserType'('PRODUCER', Bin,
				 _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_Authentication.UserType'('IMPORTER', Bin,
				 _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Authentication.UserType'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_GETEntities.Type'('PRODUCERS', Bin,
			  _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_GETEntities.Type'('IMPORTERS', Bin,
			  _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_GETEntities.Type'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Authentication', Bin, TrUserData) ->
    id(decode_msg_Authentication(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Transaction', Bin, TrUserData) ->
    id(decode_msg_Transaction(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Produce', Bin, TrUserData) ->
    id(decode_msg_Produce(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Import', Bin, TrUserData) ->
    id(decode_msg_Import(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ServerResponse', Bin, TrUserData) ->
    id(decode_msg_ServerResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('CatalogRequest', Bin, TrUserData) ->
    id(decode_msg_CatalogRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('POSTNegotiation', Bin, TrUserData) ->
    id(decode_msg_POSTNegotiation(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('DELETENegotiation', Bin,
		  TrUserData) ->
    id(decode_msg_DELETENegotiation(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('GETEntities', Bin, TrUserData) ->
    id(decode_msg_GETEntities(Bin, TrUserData), TrUserData);
decode_msg_2_doit('GETEntitiesResponse', Bin,
		  TrUserData) ->
    id(decode_msg_GETEntitiesResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('GETProducerInfo', Bin, TrUserData) ->
    id(decode_msg_GETProducerInfo(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('GETProducerInfoResponse', Bin,
		  TrUserData) ->
    id(decode_msg_GETProducerInfoResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Subscribe', Bin, TrUserData) ->
    id(decode_msg_Subscribe(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Unsubscribe', Bin, TrUserData) ->
    id(decode_msg_Unsubscribe(Bin, TrUserData), TrUserData).



decode_msg_Authentication(Bin, TrUserData) ->
    dfp_read_field_def_Authentication(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Authentication(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Authentication_type(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_Authentication(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Authentication_userType(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Authentication(<<26, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Authentication_username(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Authentication(<<34, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Authentication_password(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Authentication(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, _) ->
    #'Authentication'{type = F@_1, userType = F@_2,
		      username = F@_3, password = F@_4};
dfp_read_field_def_Authentication(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_Authentication(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_Authentication(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Authentication(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
dg_read_field_def_Authentication(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Authentication_type(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      16 ->
	  d_field_Authentication_userType(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      26 ->
	  d_field_Authentication_username(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      34 ->
	  d_field_Authentication_password(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Authentication(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
	    1 ->
		skip_64_Authentication(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData);
	    2 ->
		skip_length_delimited_Authentication(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4,
						     TrUserData);
	    3 ->
		skip_group_Authentication(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_Authentication(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData)
	  end
    end;
dg_read_field_def_Authentication(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, _) ->
    #'Authentication'{type = F@_1, userType = F@_2,
		      username = F@_3, password = F@_4}.

d_field_Authentication_type(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Authentication_type(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Authentication_type(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_Authentication.AuthType'(begin
					       <<Res:32/signed-native>> = <<(X
									       bsl
									       N
									       +
									       Acc):32/unsigned-native>>,
					       id(Res, TrUserData)
					     end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_Authentication(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_Authentication_userType(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Authentication_userType(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_Authentication_userType(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_Authentication.UserType'(begin
					       <<Res:32/signed-native>> = <<(X
									       bsl
									       N
									       +
									       Acc):32/unsigned-native>>,
					       id(Res, TrUserData)
					     end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_Authentication(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, TrUserData).

d_field_Authentication_username(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Authentication_username(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_Authentication_username(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Authentication(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, TrUserData).

d_field_Authentication_password(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Authentication_password(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_Authentication_password(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Authentication(RestF, 0, 0, F@_1,
				      F@_2, F@_3, NewFValue, TrUserData).

skip_varint_Authentication(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_Authentication(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
skip_varint_Authentication(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Authentication(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_Authentication(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_Authentication(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
skip_length_delimited_Authentication(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Authentication(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_group_Authentication(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Authentication(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_32_Authentication(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Authentication(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_64_Authentication(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Authentication(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

decode_msg_Transaction(Bin, TrUserData) ->
    dfp_read_field_def_Transaction(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Transaction(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_Transaction_produce(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_Transaction(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_Transaction_import(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_Transaction(<<>>, 0, 0, F@_1, _) ->
    #'Transaction'{txn = F@_1};
dfp_read_field_def_Transaction(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_Transaction(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_Transaction(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Transaction(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_Transaction(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Transaction_produce(Rest, 0, 0, F@_1,
				      TrUserData);
      18 ->
	  d_field_Transaction_import(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Transaction(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Transaction(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Transaction(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_Transaction(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_Transaction(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Transaction(<<>>, 0, 0, F@_1, _) ->
    #'Transaction'{txn = F@_1}.

d_field_Transaction_produce(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Transaction_produce(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_Transaction_produce(<<0:1, X:7, Rest/binary>>,
			    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Produce(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Transaction(RestF, 0, 0,
				   case Prev of
				     undefined ->
					 id({produce, NewFValue}, TrUserData);
				     {produce, MVPrev} ->
					 id({produce,
					     merge_msg_Produce(MVPrev,
							       NewFValue,
							       TrUserData)},
					    TrUserData);
				     _ -> id({produce, NewFValue}, TrUserData)
				   end,
				   TrUserData).

d_field_Transaction_import(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Transaction_import(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_Transaction_import(<<0:1, X:7, Rest/binary>>, N,
			   Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Import(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Transaction(RestF, 0, 0,
				   case Prev of
				     undefined ->
					 id({import, NewFValue}, TrUserData);
				     {import, MVPrev} ->
					 id({import,
					     merge_msg_Import(MVPrev, NewFValue,
							      TrUserData)},
					    TrUserData);
				     _ -> id({import, NewFValue}, TrUserData)
				   end,
				   TrUserData).

skip_varint_Transaction(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_Transaction(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Transaction(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_Transaction(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_Transaction(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Transaction(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Transaction(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Transaction(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_Transaction(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Transaction(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_Transaction(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_Transaction(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_Transaction(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_Transaction(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_Produce(Bin, TrUserData) ->
    dfp_read_field_def_Produce(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Produce(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_Produce_productName(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Produce(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_Produce_producerName(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Produce(<<24, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_Produce_minimumAmount(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Produce(<<32, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_Produce_maximumAmount(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Produce(<<40, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_Produce_minimumUnitaryPrice(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6,
					TrUserData);
dfp_read_field_def_Produce(<<48, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    d_field_Produce_negotiationPeriod(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_Produce(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, _) ->
    #'Produce'{productName = F@_1, producerName = F@_2,
	       minimumAmount = F@_3, maximumAmount = F@_4,
	       minimumUnitaryPrice = F@_5, negotiationPeriod = F@_6};
dfp_read_field_def_Produce(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_Produce(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_Produce(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Produce(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_Produce(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Produce_productName(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, TrUserData);
      18 ->
	  d_field_Produce_producerName(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, TrUserData);
      24 ->
	  d_field_Produce_minimumAmount(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, TrUserData);
      32 ->
	  d_field_Produce_maximumAmount(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, TrUserData);
      40 ->
	  d_field_Produce_minimumUnitaryPrice(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      TrUserData);
      48 ->
	  d_field_Produce_negotiationPeriod(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Produce(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_Produce(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_Produce(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6,
					      TrUserData);
	    3 ->
		skip_group_Produce(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, TrUserData);
	    5 ->
		skip_32_Produce(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_Produce(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, _) ->
    #'Produce'{productName = F@_1, producerName = F@_2,
	       minimumAmount = F@_3, maximumAmount = F@_4,
	       minimumUnitaryPrice = F@_5, negotiationPeriod = F@_6}.

d_field_Produce_productName(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData)
    when N < 57 ->
    d_field_Produce_productName(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_Produce_productName(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Produce(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_Produce_producerName(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData)
    when N < 57 ->
    d_field_Produce_producerName(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData);
d_field_Produce_producerName(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
			     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Produce(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_Produce_minimumAmount(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData)
    when N < 57 ->
    d_field_Produce_minimumAmount(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, TrUserData);
d_field_Produce_minimumAmount(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
			      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Produce(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_Produce_maximumAmount(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData)
    when N < 57 ->
    d_field_Produce_maximumAmount(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, TrUserData);
d_field_Produce_maximumAmount(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
			      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Produce(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_Produce_minimumUnitaryPrice(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData)
    when N < 57 ->
    d_field_Produce_minimumUnitaryPrice(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, TrUserData);
d_field_Produce_minimumUnitaryPrice(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Produce(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_Produce_negotiationPeriod(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData)
    when N < 57 ->
    d_field_Produce_negotiationPeriod(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, TrUserData);
d_field_Produce_negotiationPeriod(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Produce(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_Produce(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    skip_varint_Produce(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, TrUserData);
skip_varint_Produce(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_Produce(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_Produce(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData)
    when N < 57 ->
    skip_length_delimited_Produce(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, TrUserData);
skip_length_delimited_Produce(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Produce(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_Produce(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Produce(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_Produce(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_Produce(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_Produce(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_Produce(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_Import(Bin, TrUserData) ->
    dfp_read_field_def_Import(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Import(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Import_productName(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Import(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Import_producerName(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Import(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Import_importerName(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Import(<<32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Import_quantity(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_Import(<<40, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Import_unitaryPrice(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Import(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, _) ->
    #'Import'{productName = F@_1, producerName = F@_2,
	      importerName = F@_3, quantity = F@_4,
	      unitaryPrice = F@_5};
dfp_read_field_def_Import(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_Import(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_Import(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Import(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_Import(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Import_productName(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      18 ->
	  d_field_Import_producerName(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      26 ->
	  d_field_Import_importerName(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      32 ->
	  d_field_Import_quantity(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      40 ->
	  d_field_Import_unitaryPrice(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Import(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData);
	    1 ->
		skip_64_Import(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData);
	    2 ->
		skip_length_delimited_Import(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_Import(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_Import(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData)
	  end
    end;
dg_read_field_def_Import(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, _) ->
    #'Import'{productName = F@_1, producerName = F@_2,
	      importerName = F@_3, quantity = F@_4,
	      unitaryPrice = F@_5}.

d_field_Import_productName(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Import_productName(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Import_productName(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Import(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

d_field_Import_producerName(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Import_producerName(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Import_producerName(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Import(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, TrUserData).

d_field_Import_importerName(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Import_importerName(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Import_importerName(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Import(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, TrUserData).

d_field_Import_quantity(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Import_quantity(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Import_quantity(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Import(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, F@_5, TrUserData).

d_field_Import_unitaryPrice(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Import_unitaryPrice(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Import_unitaryPrice(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Import(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, NewFValue, TrUserData).

skip_varint_Import(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_Import(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, TrUserData);
skip_varint_Import(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Import(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_Import(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_Import(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_Import(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Import(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, TrUserData).

skip_group_Import(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Import(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, TrUserData).

skip_32_Import(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Import(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

skip_64_Import(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Import(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

decode_msg_ServerResponse(Bin, TrUserData) ->
    dfp_read_field_def_ServerResponse(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ServerResponse(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerResponse_success(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_ServerResponse(<<>>, 0, 0, F@_1,
				  _) ->
    #'ServerResponse'{success = F@_1};
dfp_read_field_def_ServerResponse(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_ServerResponse(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_ServerResponse(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerResponse(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ServerResponse(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ServerResponse_success(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerResponse(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_ServerResponse(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ServerResponse(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_ServerResponse(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_ServerResponse(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ServerResponse(<<>>, 0, 0, F@_1, _) ->
    #'ServerResponse'{success = F@_1}.

d_field_ServerResponse_success(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerResponse_success(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_ServerResponse_success(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_ServerResponse(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_ServerResponse(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_ServerResponse(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_ServerResponse(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ServerResponse(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_ServerResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerResponse(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ServerResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerResponse(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_ServerResponse(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerResponse(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_ServerResponse(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_ServerResponse(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_ServerResponse(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_ServerResponse(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_CatalogRequest(Bin, TrUserData) ->
    dfp_read_field_def_CatalogRequest(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_CatalogRequest(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_CatalogRequest_nn(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_CatalogRequest(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_CatalogRequest_no(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_CatalogRequest(<<26, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_CatalogRequest_gpi(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_CatalogRequest(<<34, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_CatalogRequest_ge(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_CatalogRequest(<<42, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_CatalogRequest_sub(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_CatalogRequest(<<50, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_CatalogRequest_unsub(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_CatalogRequest(<<>>, 0, 0, F@_1,
				  _) ->
    #'CatalogRequest'{request = F@_1};
dfp_read_field_def_CatalogRequest(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_CatalogRequest(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_CatalogRequest(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CatalogRequest(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_CatalogRequest(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CatalogRequest_nn(Rest, 0, 0, F@_1, TrUserData);
      18 ->
	  d_field_CatalogRequest_no(Rest, 0, 0, F@_1, TrUserData);
      26 ->
	  d_field_CatalogRequest_gpi(Rest, 0, 0, F@_1,
				     TrUserData);
      34 ->
	  d_field_CatalogRequest_ge(Rest, 0, 0, F@_1, TrUserData);
      42 ->
	  d_field_CatalogRequest_sub(Rest, 0, 0, F@_1,
				     TrUserData);
      50 ->
	  d_field_CatalogRequest_unsub(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CatalogRequest(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_CatalogRequest(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_CatalogRequest(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_CatalogRequest(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_CatalogRequest(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_CatalogRequest(<<>>, 0, 0, F@_1, _) ->
    #'CatalogRequest'{request = F@_1}.

d_field_CatalogRequest_nn(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_CatalogRequest_nn(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_CatalogRequest_nn(<<0:1, X:7, Rest/binary>>, N,
			  Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_POSTNegotiation(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_CatalogRequest(RestF, 0, 0,
				      case Prev of
					undefined ->
					    id({nn, NewFValue}, TrUserData);
					{nn, MVPrev} ->
					    id({nn,
						merge_msg_POSTNegotiation(MVPrev,
									  NewFValue,
									  TrUserData)},
					       TrUserData);
					_ -> id({nn, NewFValue}, TrUserData)
				      end,
				      TrUserData).

d_field_CatalogRequest_no(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_CatalogRequest_no(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_CatalogRequest_no(<<0:1, X:7, Rest/binary>>, N,
			  Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_DELETENegotiation(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_CatalogRequest(RestF, 0, 0,
				      case Prev of
					undefined ->
					    id({no, NewFValue}, TrUserData);
					{no, MVPrev} ->
					    id({no,
						merge_msg_DELETENegotiation(MVPrev,
									    NewFValue,
									    TrUserData)},
					       TrUserData);
					_ -> id({no, NewFValue}, TrUserData)
				      end,
				      TrUserData).

d_field_CatalogRequest_gpi(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_CatalogRequest_gpi(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_CatalogRequest_gpi(<<0:1, X:7, Rest/binary>>, N,
			   Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_GETProducerInfo(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_CatalogRequest(RestF, 0, 0,
				      case Prev of
					undefined ->
					    id({gpi, NewFValue}, TrUserData);
					{gpi, MVPrev} ->
					    id({gpi,
						merge_msg_GETProducerInfo(MVPrev,
									  NewFValue,
									  TrUserData)},
					       TrUserData);
					_ -> id({gpi, NewFValue}, TrUserData)
				      end,
				      TrUserData).

d_field_CatalogRequest_ge(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_CatalogRequest_ge(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_CatalogRequest_ge(<<0:1, X:7, Rest/binary>>, N,
			  Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_GETEntities(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_CatalogRequest(RestF, 0, 0,
				      case Prev of
					undefined ->
					    id({ge, NewFValue}, TrUserData);
					{ge, MVPrev} ->
					    id({ge,
						merge_msg_GETEntities(MVPrev,
								      NewFValue,
								      TrUserData)},
					       TrUserData);
					_ -> id({ge, NewFValue}, TrUserData)
				      end,
				      TrUserData).

d_field_CatalogRequest_sub(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_CatalogRequest_sub(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_CatalogRequest_sub(<<0:1, X:7, Rest/binary>>, N,
			   Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Subscribe(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_CatalogRequest(RestF, 0, 0,
				      case Prev of
					undefined ->
					    id({sub, NewFValue}, TrUserData);
					{sub, MVPrev} ->
					    id({sub,
						merge_msg_Subscribe(MVPrev,
								    NewFValue,
								    TrUserData)},
					       TrUserData);
					_ -> id({sub, NewFValue}, TrUserData)
				      end,
				      TrUserData).

d_field_CatalogRequest_unsub(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_CatalogRequest_unsub(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_CatalogRequest_unsub(<<0:1, X:7, Rest/binary>>,
			     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_Unsubscribe(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_CatalogRequest(RestF, 0, 0,
				      case Prev of
					undefined ->
					    id({unsub, NewFValue}, TrUserData);
					{unsub, MVPrev} ->
					    id({unsub,
						merge_msg_Unsubscribe(MVPrev,
								      NewFValue,
								      TrUserData)},
					       TrUserData);
					_ -> id({unsub, NewFValue}, TrUserData)
				      end,
				      TrUserData).

skip_varint_CatalogRequest(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_CatalogRequest(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_CatalogRequest(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_CatalogRequest(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_CatalogRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_CatalogRequest(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_CatalogRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CatalogRequest(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_CatalogRequest(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CatalogRequest(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_CatalogRequest(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_CatalogRequest(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_CatalogRequest(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_CatalogRequest(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_POSTNegotiation(Bin, TrUserData) ->
    dfp_read_field_def_POSTNegotiation(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_POSTNegotiation(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData) ->
    d_field_POSTNegotiation_productName(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6,
					TrUserData);
dfp_read_field_def_POSTNegotiation(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData) ->
    d_field_POSTNegotiation_producerName(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6,
					 TrUserData);
dfp_read_field_def_POSTNegotiation(<<24, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData) ->
    d_field_POSTNegotiation_minimumAmount(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData);
dfp_read_field_def_POSTNegotiation(<<32, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData) ->
    d_field_POSTNegotiation_maximumAmount(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData);
dfp_read_field_def_POSTNegotiation(<<40, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData) ->
    d_field_POSTNegotiation_minimumUnitaryPrice(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, TrUserData);
dfp_read_field_def_POSTNegotiation(<<48, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData) ->
    d_field_POSTNegotiation_negotiationPeriod(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, TrUserData);
dfp_read_field_def_POSTNegotiation(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #'POSTNegotiation'{productName = F@_1,
		       producerName = F@_2, minimumAmount = F@_3,
		       maximumAmount = F@_4, minimumUnitaryPrice = F@_5,
		       negotiationPeriod = F@_6};
dfp_read_field_def_POSTNegotiation(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_POSTNegotiation(Other, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_POSTNegotiation(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_POSTNegotiation(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, TrUserData);
dg_read_field_def_POSTNegotiation(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_POSTNegotiation_productName(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      TrUserData);
      18 ->
	  d_field_POSTNegotiation_producerName(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       TrUserData);
      24 ->
	  d_field_POSTNegotiation_minimumAmount(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						TrUserData);
      32 ->
	  d_field_POSTNegotiation_maximumAmount(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						TrUserData);
      40 ->
	  d_field_POSTNegotiation_minimumUnitaryPrice(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, TrUserData);
      48 ->
	  d_field_POSTNegotiation_negotiationPeriod(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_POSTNegotiation(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_POSTNegotiation(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_POSTNegotiation(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4, F@_5,
						      F@_6, TrUserData);
	    3 ->
		skip_group_POSTNegotiation(Rest, Key bsr 3, 0, F@_1,
					   F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData);
	    5 ->
		skip_32_POSTNegotiation(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_POSTNegotiation(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #'POSTNegotiation'{productName = F@_1,
		       producerName = F@_2, minimumAmount = F@_3,
		       maximumAmount = F@_4, minimumUnitaryPrice = F@_5,
		       negotiationPeriod = F@_6}.

d_field_POSTNegotiation_productName(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData)
    when N < 57 ->
    d_field_POSTNegotiation_productName(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, TrUserData);
d_field_POSTNegotiation_productName(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_POSTNegotiation(RestF, 0, 0,
				       NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData).

d_field_POSTNegotiation_producerName(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData)
    when N < 57 ->
    d_field_POSTNegotiation_producerName(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, TrUserData);
d_field_POSTNegotiation_producerName(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_POSTNegotiation(RestF, 0, 0, F@_1,
				       NewFValue, F@_3, F@_4, F@_5, F@_6,
				       TrUserData).

d_field_POSTNegotiation_minimumAmount(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData)
    when N < 57 ->
    d_field_POSTNegotiation_minimumAmount(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, TrUserData);
d_field_POSTNegotiation_minimumAmount(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
				      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_POSTNegotiation(RestF, 0, 0, F@_1,
				       F@_2, NewFValue, F@_4, F@_5, F@_6,
				       TrUserData).

d_field_POSTNegotiation_maximumAmount(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData)
    when N < 57 ->
    d_field_POSTNegotiation_maximumAmount(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, TrUserData);
d_field_POSTNegotiation_maximumAmount(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_POSTNegotiation(RestF, 0, 0, F@_1,
				       F@_2, F@_3, NewFValue, F@_5, F@_6,
				       TrUserData).

d_field_POSTNegotiation_minimumUnitaryPrice(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_POSTNegotiation_minimumUnitaryPrice(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, TrUserData);
d_field_POSTNegotiation_minimumUnitaryPrice(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					    F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_POSTNegotiation(RestF, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, NewFValue, F@_6,
				       TrUserData).

d_field_POSTNegotiation_negotiationPeriod(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData)
    when N < 57 ->
    d_field_POSTNegotiation_negotiationPeriod(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, TrUserData);
d_field_POSTNegotiation_negotiationPeriod(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_POSTNegotiation(RestF, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, NewFValue,
				       TrUserData).

skip_varint_POSTNegotiation(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData) ->
    skip_varint_POSTNegotiation(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_POSTNegotiation(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData) ->
    dfp_read_field_def_POSTNegotiation(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData).

skip_length_delimited_POSTNegotiation(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData)
    when N < 57 ->
    skip_length_delimited_POSTNegotiation(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, TrUserData);
skip_length_delimited_POSTNegotiation(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_POSTNegotiation(Rest2, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData).

skip_group_POSTNegotiation(Bin, FNum, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_POSTNegotiation(Rest, 0, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData).

skip_32_POSTNegotiation(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_POSTNegotiation(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData).

skip_64_POSTNegotiation(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_POSTNegotiation(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData).

decode_msg_DELETENegotiation(Bin, TrUserData) ->
    dfp_read_field_def_DELETENegotiation(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_DELETENegotiation(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_DELETENegotiation_productName(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_DELETENegotiation(<<18,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_DELETENegotiation_producerName(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
dfp_read_field_def_DELETENegotiation(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #'DELETENegotiation'{productName = F@_1,
			 producerName = F@_2};
dfp_read_field_def_DELETENegotiation(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_DELETENegotiation(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_DELETENegotiation(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DELETENegotiation(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_DELETENegotiation(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DELETENegotiation_productName(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      18 ->
	  d_field_DELETENegotiation_producerName(Rest, 0, 0, F@_1,
						 F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DELETENegotiation(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_DELETENegotiation(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_DELETENegotiation(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_DELETENegotiation(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_DELETENegotiation(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_DELETENegotiation(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #'DELETENegotiation'{productName = F@_1,
			 producerName = F@_2}.

d_field_DELETENegotiation_productName(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_DELETENegotiation_productName(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_DELETENegotiation_productName(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DELETENegotiation(RestF, 0, 0,
					 NewFValue, F@_2, TrUserData).

d_field_DELETENegotiation_producerName(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_DELETENegotiation_producerName(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
d_field_DELETENegotiation_producerName(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DELETENegotiation(RestF, 0, 0, F@_1,
					 NewFValue, TrUserData).

skip_varint_DELETENegotiation(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_DELETENegotiation(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_DELETENegotiation(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_DELETENegotiation(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_DELETENegotiation(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_DELETENegotiation(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_DELETENegotiation(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DELETENegotiation(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_DELETENegotiation(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DELETENegotiation(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_DELETENegotiation(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_DELETENegotiation(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_DELETENegotiation(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_DELETENegotiation(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

decode_msg_GETEntities(Bin, TrUserData) ->
    dfp_read_field_def_GETEntities(Bin, 0, 0,
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_GETEntities(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_GETEntities_Entities(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_GETEntities(<<>>, 0, 0, F@_1, _) ->
    #'GETEntities'{'Entities' = F@_1};
dfp_read_field_def_GETEntities(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_GETEntities(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_GETEntities(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GETEntities(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_GETEntities(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_GETEntities_Entities(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GETEntities(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_GETEntities(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_GETEntities(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_GETEntities(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_GETEntities(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_GETEntities(<<>>, 0, 0, F@_1, _) ->
    #'GETEntities'{'Entities' = F@_1}.

d_field_GETEntities_Entities(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_GETEntities_Entities(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_GETEntities_Entities(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_GETEntities.Type'(begin
							 <<Res:32/signed-native>> =
							     <<(X bsl N +
								  Acc):32/unsigned-native>>,
							 id(Res, TrUserData)
						       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_GETEntities(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_GETEntities(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_GETEntities(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_GETEntities(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GETEntities(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_GETEntities(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GETEntities(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_GETEntities(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GETEntities(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_GETEntities(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GETEntities(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_GETEntities(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_GETEntities(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_GETEntities(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_GETEntities(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_GETEntitiesResponse(Bin, TrUserData) ->
    dfp_read_field_def_GETEntitiesResponse(Bin, 0, 0,
					   id([], TrUserData), TrUserData).

dfp_read_field_def_GETEntitiesResponse(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_GETEntitiesResponse_entities(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_GETEntitiesResponse(<<>>, 0, 0, R1,
				       TrUserData) ->
    #'GETEntitiesResponse'{entities =
			       lists_reverse(R1, TrUserData)};
dfp_read_field_def_GETEntitiesResponse(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_GETEntitiesResponse(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_GETEntitiesResponse(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GETEntitiesResponse(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_GETEntitiesResponse(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GETEntitiesResponse_entities(Rest, 0, 0, F@_1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GETEntitiesResponse(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_GETEntitiesResponse(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_GETEntitiesResponse(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_GETEntitiesResponse(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_GETEntitiesResponse(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_GETEntitiesResponse(<<>>, 0, 0, R1,
				      TrUserData) ->
    #'GETEntitiesResponse'{entities =
			       lists_reverse(R1, TrUserData)}.

d_field_GETEntitiesResponse_entities(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_GETEntitiesResponse_entities(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_field_GETEntitiesResponse_entities(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GETEntitiesResponse(RestF, 0, 0,
					   cons(NewFValue, Prev, TrUserData),
					   TrUserData).

skip_varint_GETEntitiesResponse(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_GETEntitiesResponse(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_GETEntitiesResponse(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GETEntitiesResponse(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_GETEntitiesResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GETEntitiesResponse(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_GETEntitiesResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GETEntitiesResponse(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_GETEntitiesResponse(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GETEntitiesResponse(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_GETEntitiesResponse(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GETEntitiesResponse(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_GETEntitiesResponse(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GETEntitiesResponse(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_GETProducerInfo(Bin, TrUserData) ->
    dfp_read_field_def_GETProducerInfo(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_GETProducerInfo(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_GETProducerInfo_username(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_GETProducerInfo(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_GETProducerInfo_producerName(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_GETProducerInfo(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #'GETProducerInfo'{username = F@_1,
		       producerName = F@_2};
dfp_read_field_def_GETProducerInfo(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData) ->
    dg_read_field_def_GETProducerInfo(Other, Z1, Z2, F@_1,
				      F@_2, TrUserData).

dg_read_field_def_GETProducerInfo(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GETProducerInfo(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_GETProducerInfo(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GETProducerInfo_username(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      18 ->
	  d_field_GETProducerInfo_producerName(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GETProducerInfo(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    1 ->
		skip_64_GETProducerInfo(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    2 ->
		skip_length_delimited_GETProducerInfo(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    3 ->
		skip_group_GETProducerInfo(Rest, Key bsr 3, 0, F@_1,
					   F@_2, TrUserData);
	    5 ->
		skip_32_GETProducerInfo(Rest, 0, 0, F@_1, F@_2,
					TrUserData)
	  end
    end;
dg_read_field_def_GETProducerInfo(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #'GETProducerInfo'{username = F@_1,
		       producerName = F@_2}.

d_field_GETProducerInfo_username(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_GETProducerInfo_username(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_GETProducerInfo_username(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GETProducerInfo(RestF, 0, 0,
				       NewFValue, F@_2, TrUserData).

d_field_GETProducerInfo_producerName(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_GETProducerInfo_producerName(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_GETProducerInfo_producerName(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GETProducerInfo(RestF, 0, 0, F@_1,
				       NewFValue, TrUserData).

skip_varint_GETProducerInfo(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_GETProducerInfo(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
skip_varint_GETProducerInfo(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_GETProducerInfo(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_length_delimited_GETProducerInfo(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_GETProducerInfo(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
skip_length_delimited_GETProducerInfo(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GETProducerInfo(Rest2, 0, 0, F@_1,
				       F@_2, TrUserData).

skip_group_GETProducerInfo(Bin, FNum, Z2, F@_1, F@_2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GETProducerInfo(Rest, 0, Z2, F@_1,
				       F@_2, TrUserData).

skip_32_GETProducerInfo(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_GETProducerInfo(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_64_GETProducerInfo(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_GETProducerInfo(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

decode_msg_GETProducerInfoResponse(Bin, TrUserData) ->
    dfp_read_field_def_GETProducerInfoResponse(Bin, 0, 0,
					       id([], TrUserData), TrUserData).

dfp_read_field_def_GETProducerInfoResponse(<<10,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    d_field_GETProducerInfoResponse_negotiations(Rest, Z1,
						 Z2, F@_1, TrUserData);
dfp_read_field_def_GETProducerInfoResponse(<<>>, 0, 0,
					   R1, TrUserData) ->
    #'GETProducerInfoResponse'{negotiations =
				   lists_reverse(R1, TrUserData)};
dfp_read_field_def_GETProducerInfoResponse(Other, Z1,
					   Z2, F@_1, TrUserData) ->
    dg_read_field_def_GETProducerInfoResponse(Other, Z1, Z2,
					      F@_1, TrUserData).

dg_read_field_def_GETProducerInfoResponse(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GETProducerInfoResponse(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_GETProducerInfoResponse(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GETProducerInfoResponse_negotiations(Rest, 0, 0,
						       F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GETProducerInfoResponse(Rest, 0, 0, F@_1,
						    TrUserData);
	    1 ->
		skip_64_GETProducerInfoResponse(Rest, 0, 0, F@_1,
						TrUserData);
	    2 ->
		skip_length_delimited_GETProducerInfoResponse(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    3 ->
		skip_group_GETProducerInfoResponse(Rest, Key bsr 3, 0,
						   F@_1, TrUserData);
	    5 ->
		skip_32_GETProducerInfoResponse(Rest, 0, 0, F@_1,
						TrUserData)
	  end
    end;
dg_read_field_def_GETProducerInfoResponse(<<>>, 0, 0,
					  R1, TrUserData) ->
    #'GETProducerInfoResponse'{negotiations =
				   lists_reverse(R1, TrUserData)}.

d_field_GETProducerInfoResponse_negotiations(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_GETProducerInfoResponse_negotiations(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
d_field_GETProducerInfoResponse_negotiations(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_POSTNegotiation(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GETProducerInfoResponse(RestF, 0, 0,
					       cons(NewFValue, Prev,
						    TrUserData),
					       TrUserData).

skip_varint_GETProducerInfoResponse(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_GETProducerInfoResponse(Rest, Z1, Z2, F@_1,
					TrUserData);
skip_varint_GETProducerInfoResponse(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GETProducerInfoResponse(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_length_delimited_GETProducerInfoResponse(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GETProducerInfoResponse(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
skip_length_delimited_GETProducerInfoResponse(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GETProducerInfoResponse(Rest2, 0, 0,
					       F@_1, TrUserData).

skip_group_GETProducerInfoResponse(Bin, FNum, Z2, F@_1,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GETProducerInfoResponse(Rest, 0, Z2,
					       F@_1, TrUserData).

skip_32_GETProducerInfoResponse(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GETProducerInfoResponse(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_64_GETProducerInfoResponse(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GETProducerInfoResponse(Rest, Z1, Z2,
					       F@_1, TrUserData).

decode_msg_Subscribe(Bin, TrUserData) ->
    dfp_read_field_def_Subscribe(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Subscribe(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Subscribe_username(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_Subscribe(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Subscribe_producerName(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_Subscribe(<<26, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Subscribe_productName(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_Subscribe(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, _) ->
    #'Subscribe'{username = F@_1, producerName = F@_2,
		 productName = F@_3};
dfp_read_field_def_Subscribe(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData) ->
    dg_read_field_def_Subscribe(Other, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

dg_read_field_def_Subscribe(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Subscribe(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Subscribe(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Subscribe_username(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      18 ->
	  d_field_Subscribe_producerName(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      26 ->
	  d_field_Subscribe_productName(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Subscribe(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    1 ->
		skip_64_Subscribe(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    2 ->
		skip_length_delimited_Subscribe(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    3 ->
		skip_group_Subscribe(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, TrUserData);
	    5 ->
		skip_32_Subscribe(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData)
	  end
    end;
dg_read_field_def_Subscribe(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #'Subscribe'{username = F@_1, producerName = F@_2,
		 productName = F@_3}.

d_field_Subscribe_username(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Subscribe_username(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_Subscribe_username(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Subscribe(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, TrUserData).

d_field_Subscribe_producerName(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Subscribe_producerName(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_Subscribe_producerName(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Subscribe(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, TrUserData).

d_field_Subscribe_productName(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Subscribe_productName(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_Subscribe_productName(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Subscribe(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, TrUserData).

skip_varint_Subscribe(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_Subscribe(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
skip_varint_Subscribe(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Subscribe(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_length_delimited_Subscribe(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Subscribe(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
skip_length_delimited_Subscribe(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Subscribe(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, TrUserData).

skip_group_Subscribe(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Subscribe(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_32_Subscribe(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Subscribe(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_64_Subscribe(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Subscribe(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

decode_msg_Unsubscribe(Bin, TrUserData) ->
    dfp_read_field_def_Unsubscribe(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_Unsubscribe(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Unsubscribe_username(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_Unsubscribe(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Unsubscribe_producerName(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
dfp_read_field_def_Unsubscribe(<<26, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Unsubscribe_productName(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
dfp_read_field_def_Unsubscribe(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, _) ->
    #'Unsubscribe'{username = F@_1, producerName = F@_2,
		   productName = F@_3};
dfp_read_field_def_Unsubscribe(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    dg_read_field_def_Unsubscribe(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

dg_read_field_def_Unsubscribe(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Unsubscribe(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Unsubscribe(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Unsubscribe_username(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      18 ->
	  d_field_Unsubscribe_producerName(Rest, 0, 0, F@_1, F@_2,
					   F@_3, TrUserData);
      26 ->
	  d_field_Unsubscribe_productName(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Unsubscribe(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData);
	    1 ->
		skip_64_Unsubscribe(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    2 ->
		skip_length_delimited_Unsubscribe(Rest, 0, 0, F@_1,
						  F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_Unsubscribe(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, TrUserData);
	    5 ->
		skip_32_Unsubscribe(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData)
	  end
    end;
dg_read_field_def_Unsubscribe(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, _) ->
    #'Unsubscribe'{username = F@_1, producerName = F@_2,
		   productName = F@_3}.

d_field_Unsubscribe_username(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Unsubscribe_username(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_Unsubscribe_username(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Unsubscribe(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, TrUserData).

d_field_Unsubscribe_producerName(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Unsubscribe_producerName(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
d_field_Unsubscribe_producerName(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Unsubscribe(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, TrUserData).

d_field_Unsubscribe_productName(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Unsubscribe_productName(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
d_field_Unsubscribe_productName(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Unsubscribe(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, TrUserData).

skip_varint_Unsubscribe(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_Unsubscribe(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
skip_varint_Unsubscribe(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Unsubscribe(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_length_delimited_Unsubscribe(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Unsubscribe(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
skip_length_delimited_Unsubscribe(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Unsubscribe(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, TrUserData).

skip_group_Unsubscribe(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Unsubscribe(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_32_Unsubscribe(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Unsubscribe(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_64_Unsubscribe(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Unsubscribe(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

'd_enum_Authentication.AuthType'(0) -> 'REGISTER';
'd_enum_Authentication.AuthType'(1) -> 'LOGIN';
'd_enum_Authentication.AuthType'(V) -> V.

'd_enum_Authentication.UserType'(0) -> 'PRODUCER';
'd_enum_Authentication.UserType'(1) -> 'IMPORTER';
'd_enum_Authentication.UserType'(V) -> V.

'd_enum_GETEntities.Type'(0) -> 'PRODUCERS';
'd_enum_GETEntities.Type'(1) -> 'IMPORTERS';
'd_enum_GETEntities.Type'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Authentication' ->
	  merge_msg_Authentication(Prev, New, TrUserData);
      'Transaction' ->
	  merge_msg_Transaction(Prev, New, TrUserData);
      'Produce' -> merge_msg_Produce(Prev, New, TrUserData);
      'Import' -> merge_msg_Import(Prev, New, TrUserData);
      'ServerResponse' ->
	  merge_msg_ServerResponse(Prev, New, TrUserData);
      'CatalogRequest' ->
	  merge_msg_CatalogRequest(Prev, New, TrUserData);
      'POSTNegotiation' ->
	  merge_msg_POSTNegotiation(Prev, New, TrUserData);
      'DELETENegotiation' ->
	  merge_msg_DELETENegotiation(Prev, New, TrUserData);
      'GETEntities' ->
	  merge_msg_GETEntities(Prev, New, TrUserData);
      'GETEntitiesResponse' ->
	  merge_msg_GETEntitiesResponse(Prev, New, TrUserData);
      'GETProducerInfo' ->
	  merge_msg_GETProducerInfo(Prev, New, TrUserData);
      'GETProducerInfoResponse' ->
	  merge_msg_GETProducerInfoResponse(Prev, New,
					    TrUserData);
      'Subscribe' ->
	  merge_msg_Subscribe(Prev, New, TrUserData);
      'Unsubscribe' ->
	  merge_msg_Unsubscribe(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Authentication/3}).
merge_msg_Authentication(#'Authentication'{},
			 #'Authentication'{type = NFtype, userType = NFuserType,
					   username = NFusername,
					   password = NFpassword},
			 _) ->
    #'Authentication'{type = NFtype, userType = NFuserType,
		      username = NFusername, password = NFpassword}.

-compile({nowarn_unused_function,merge_msg_Transaction/3}).
merge_msg_Transaction(#'Transaction'{txn = PFtxn},
		      #'Transaction'{txn = NFtxn}, TrUserData) ->
    #'Transaction'{txn =
		       case {PFtxn, NFtxn} of
			 {{produce, OPFtxn}, {produce, ONFtxn}} ->
			     {produce,
			      merge_msg_Produce(OPFtxn, ONFtxn, TrUserData)};
			 {{import, OPFtxn}, {import, ONFtxn}} ->
			     {import,
			      merge_msg_Import(OPFtxn, ONFtxn, TrUserData)};
			 {_, undefined} -> PFtxn;
			 _ -> NFtxn
		       end}.

-compile({nowarn_unused_function,merge_msg_Produce/3}).
merge_msg_Produce(#'Produce'{},
		  #'Produce'{productName = NFproductName,
			     producerName = NFproducerName,
			     minimumAmount = NFminimumAmount,
			     maximumAmount = NFmaximumAmount,
			     minimumUnitaryPrice = NFminimumUnitaryPrice,
			     negotiationPeriod = NFnegotiationPeriod},
		  _) ->
    #'Produce'{productName = NFproductName,
	       producerName = NFproducerName,
	       minimumAmount = NFminimumAmount,
	       maximumAmount = NFmaximumAmount,
	       minimumUnitaryPrice = NFminimumUnitaryPrice,
	       negotiationPeriod = NFnegotiationPeriod}.

-compile({nowarn_unused_function,merge_msg_Import/3}).
merge_msg_Import(#'Import'{},
		 #'Import'{productName = NFproductName,
			   producerName = NFproducerName,
			   importerName = NFimporterName, quantity = NFquantity,
			   unitaryPrice = NFunitaryPrice},
		 _) ->
    #'Import'{productName = NFproductName,
	      producerName = NFproducerName,
	      importerName = NFimporterName, quantity = NFquantity,
	      unitaryPrice = NFunitaryPrice}.

-compile({nowarn_unused_function,merge_msg_ServerResponse/3}).
merge_msg_ServerResponse(#'ServerResponse'{},
			 #'ServerResponse'{success = NFsuccess}, _) ->
    #'ServerResponse'{success = NFsuccess}.

-compile({nowarn_unused_function,merge_msg_CatalogRequest/3}).
merge_msg_CatalogRequest(#'CatalogRequest'{request =
					       PFrequest},
			 #'CatalogRequest'{request = NFrequest}, TrUserData) ->
    #'CatalogRequest'{request =
			  case {PFrequest, NFrequest} of
			    {{nn, OPFrequest}, {nn, ONFrequest}} ->
				{nn,
				 merge_msg_POSTNegotiation(OPFrequest,
							   ONFrequest,
							   TrUserData)};
			    {{no, OPFrequest}, {no, ONFrequest}} ->
				{no,
				 merge_msg_DELETENegotiation(OPFrequest,
							     ONFrequest,
							     TrUserData)};
			    {{gpi, OPFrequest}, {gpi, ONFrequest}} ->
				{gpi,
				 merge_msg_GETProducerInfo(OPFrequest,
							   ONFrequest,
							   TrUserData)};
			    {{ge, OPFrequest}, {ge, ONFrequest}} ->
				{ge,
				 merge_msg_GETEntities(OPFrequest, ONFrequest,
						       TrUserData)};
			    {{sub, OPFrequest}, {sub, ONFrequest}} ->
				{sub,
				 merge_msg_Subscribe(OPFrequest, ONFrequest,
						     TrUserData)};
			    {{unsub, OPFrequest}, {unsub, ONFrequest}} ->
				{unsub,
				 merge_msg_Unsubscribe(OPFrequest, ONFrequest,
						       TrUserData)};
			    {_, undefined} -> PFrequest;
			    _ -> NFrequest
			  end}.

-compile({nowarn_unused_function,merge_msg_POSTNegotiation/3}).
merge_msg_POSTNegotiation(#'POSTNegotiation'{},
			  #'POSTNegotiation'{productName = NFproductName,
					     producerName = NFproducerName,
					     minimumAmount = NFminimumAmount,
					     maximumAmount = NFmaximumAmount,
					     minimumUnitaryPrice =
						 NFminimumUnitaryPrice,
					     negotiationPeriod =
						 NFnegotiationPeriod},
			  _) ->
    #'POSTNegotiation'{productName = NFproductName,
		       producerName = NFproducerName,
		       minimumAmount = NFminimumAmount,
		       maximumAmount = NFmaximumAmount,
		       minimumUnitaryPrice = NFminimumUnitaryPrice,
		       negotiationPeriod = NFnegotiationPeriod}.

-compile({nowarn_unused_function,merge_msg_DELETENegotiation/3}).
merge_msg_DELETENegotiation(#'DELETENegotiation'{},
			    #'DELETENegotiation'{productName = NFproductName,
						 producerName = NFproducerName},
			    _) ->
    #'DELETENegotiation'{productName = NFproductName,
			 producerName = NFproducerName}.

-compile({nowarn_unused_function,merge_msg_GETEntities/3}).
merge_msg_GETEntities(#'GETEntities'{},
		      #'GETEntities'{'Entities' = NFEntities}, _) ->
    #'GETEntities'{'Entities' = NFEntities}.

-compile({nowarn_unused_function,merge_msg_GETEntitiesResponse/3}).
merge_msg_GETEntitiesResponse(#'GETEntitiesResponse'{entities
							 = PFentities},
			      #'GETEntitiesResponse'{entities = NFentities},
			      TrUserData) ->
    #'GETEntitiesResponse'{entities =
			       if PFentities /= undefined,
				  NFentities /= undefined ->
				      'erlang_++'(PFentities, NFentities,
						  TrUserData);
				  PFentities == undefined -> NFentities;
				  NFentities == undefined -> PFentities
			       end}.

-compile({nowarn_unused_function,merge_msg_GETProducerInfo/3}).
merge_msg_GETProducerInfo(#'GETProducerInfo'{},
			  #'GETProducerInfo'{username = NFusername,
					     producerName = NFproducerName},
			  _) ->
    #'GETProducerInfo'{username = NFusername,
		       producerName = NFproducerName}.

-compile({nowarn_unused_function,merge_msg_GETProducerInfoResponse/3}).
merge_msg_GETProducerInfoResponse(#'GETProducerInfoResponse'{negotiations
								 =
								 PFnegotiations},
				  #'GETProducerInfoResponse'{negotiations =
								 NFnegotiations},
				  TrUserData) ->
    #'GETProducerInfoResponse'{negotiations =
				   if PFnegotiations /= undefined,
				      NFnegotiations /= undefined ->
					  'erlang_++'(PFnegotiations,
						      NFnegotiations,
						      TrUserData);
				      PFnegotiations == undefined ->
					  NFnegotiations;
				      NFnegotiations == undefined ->
					  PFnegotiations
				   end}.

-compile({nowarn_unused_function,merge_msg_Subscribe/3}).
merge_msg_Subscribe(#'Subscribe'{},
		    #'Subscribe'{username = NFusername,
				 producerName = NFproducerName,
				 productName = NFproductName},
		    _) ->
    #'Subscribe'{username = NFusername,
		 producerName = NFproducerName,
		 productName = NFproductName}.

-compile({nowarn_unused_function,merge_msg_Unsubscribe/3}).
merge_msg_Unsubscribe(#'Unsubscribe'{},
		      #'Unsubscribe'{username = NFusername,
				     producerName = NFproducerName,
				     productName = NFproductName},
		      _) ->
    #'Unsubscribe'{username = NFusername,
		   producerName = NFproducerName,
		   productName = NFproductName}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Authentication' ->
	  v_msg_Authentication(Msg, [MsgName], TrUserData);
      'Transaction' ->
	  v_msg_Transaction(Msg, [MsgName], TrUserData);
      'Produce' -> v_msg_Produce(Msg, [MsgName], TrUserData);
      'Import' -> v_msg_Import(Msg, [MsgName], TrUserData);
      'ServerResponse' ->
	  v_msg_ServerResponse(Msg, [MsgName], TrUserData);
      'CatalogRequest' ->
	  v_msg_CatalogRequest(Msg, [MsgName], TrUserData);
      'POSTNegotiation' ->
	  v_msg_POSTNegotiation(Msg, [MsgName], TrUserData);
      'DELETENegotiation' ->
	  v_msg_DELETENegotiation(Msg, [MsgName], TrUserData);
      'GETEntities' ->
	  v_msg_GETEntities(Msg, [MsgName], TrUserData);
      'GETEntitiesResponse' ->
	  v_msg_GETEntitiesResponse(Msg, [MsgName], TrUserData);
      'GETProducerInfo' ->
	  v_msg_GETProducerInfo(Msg, [MsgName], TrUserData);
      'GETProducerInfoResponse' ->
	  v_msg_GETProducerInfoResponse(Msg, [MsgName],
					TrUserData);
      'Subscribe' ->
	  v_msg_Subscribe(Msg, [MsgName], TrUserData);
      'Unsubscribe' ->
	  v_msg_Unsubscribe(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Authentication/3}).
-dialyzer({nowarn_function,v_msg_Authentication/3}).
v_msg_Authentication(#'Authentication'{type = F1,
				       userType = F2, username = F3,
				       password = F4},
		     Path, TrUserData) ->
    'v_enum_Authentication.AuthType'(F1, [type | Path],
				     TrUserData),
    'v_enum_Authentication.UserType'(F2, [userType | Path],
				     TrUserData),
    v_type_string(F3, [username | Path], TrUserData),
    v_type_string(F4, [password | Path], TrUserData),
    ok;
v_msg_Authentication(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Authentication'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_Transaction/3}).
-dialyzer({nowarn_function,v_msg_Transaction/3}).
v_msg_Transaction(#'Transaction'{txn = F1}, Path,
		  TrUserData) ->
    case F1 of
      undefined -> ok;
      {produce, OF1} ->
	  v_msg_Produce(OF1, [produce, txn | Path], TrUserData);
      {import, OF1} ->
	  v_msg_Import(OF1, [import, txn | Path], TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [txn | Path])
    end,
    ok;
v_msg_Transaction(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Transaction'}, X, Path).

-compile({nowarn_unused_function,v_msg_Produce/3}).
-dialyzer({nowarn_function,v_msg_Produce/3}).
v_msg_Produce(#'Produce'{productName = F1,
			 producerName = F2, minimumAmount = F3,
			 maximumAmount = F4, minimumUnitaryPrice = F5,
			 negotiationPeriod = F6},
	      Path, TrUserData) ->
    v_type_string(F1, [productName | Path], TrUserData),
    v_type_string(F2, [producerName | Path], TrUserData),
    v_type_int64(F3, [minimumAmount | Path], TrUserData),
    v_type_int64(F4, [maximumAmount | Path], TrUserData),
    v_type_int64(F5, [minimumUnitaryPrice | Path],
		 TrUserData),
    v_type_int64(F6, [negotiationPeriod | Path],
		 TrUserData),
    ok;
v_msg_Produce(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Produce'}, X, Path).

-compile({nowarn_unused_function,v_msg_Import/3}).
-dialyzer({nowarn_function,v_msg_Import/3}).
v_msg_Import(#'Import'{productName = F1,
		       producerName = F2, importerName = F3, quantity = F4,
		       unitaryPrice = F5},
	     Path, TrUserData) ->
    v_type_string(F1, [productName | Path], TrUserData),
    v_type_string(F2, [producerName | Path], TrUserData),
    v_type_string(F3, [importerName | Path], TrUserData),
    v_type_int64(F4, [quantity | Path], TrUserData),
    v_type_int64(F5, [unitaryPrice | Path], TrUserData),
    ok;
v_msg_Import(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Import'}, X, Path).

-compile({nowarn_unused_function,v_msg_ServerResponse/3}).
-dialyzer({nowarn_function,v_msg_ServerResponse/3}).
v_msg_ServerResponse(#'ServerResponse'{success = F1},
		     Path, TrUserData) ->
    v_type_bool(F1, [success | Path], TrUserData), ok;
v_msg_ServerResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ServerResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_CatalogRequest/3}).
-dialyzer({nowarn_function,v_msg_CatalogRequest/3}).
v_msg_CatalogRequest(#'CatalogRequest'{request = F1},
		     Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {nn, OF1} ->
	  v_msg_POSTNegotiation(OF1, [nn, request | Path],
				TrUserData);
      {no, OF1} ->
	  v_msg_DELETENegotiation(OF1, [no, request | Path],
				  TrUserData);
      {gpi, OF1} ->
	  v_msg_GETProducerInfo(OF1, [gpi, request | Path],
				TrUserData);
      {ge, OF1} ->
	  v_msg_GETEntities(OF1, [ge, request | Path],
			    TrUserData);
      {sub, OF1} ->
	  v_msg_Subscribe(OF1, [sub, request | Path], TrUserData);
      {unsub, OF1} ->
	  v_msg_Unsubscribe(OF1, [unsub, request | Path],
			    TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [request | Path])
    end,
    ok;
v_msg_CatalogRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'CatalogRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_POSTNegotiation/3}).
-dialyzer({nowarn_function,v_msg_POSTNegotiation/3}).
v_msg_POSTNegotiation(#'POSTNegotiation'{productName =
					     F1,
					 producerName = F2, minimumAmount = F3,
					 maximumAmount = F4,
					 minimumUnitaryPrice = F5,
					 negotiationPeriod = F6},
		      Path, TrUserData) ->
    v_type_string(F1, [productName | Path], TrUserData),
    v_type_string(F2, [producerName | Path], TrUserData),
    v_type_int64(F3, [minimumAmount | Path], TrUserData),
    v_type_int64(F4, [maximumAmount | Path], TrUserData),
    v_type_int64(F5, [minimumUnitaryPrice | Path],
		 TrUserData),
    v_type_int64(F6, [negotiationPeriod | Path],
		 TrUserData),
    ok;
v_msg_POSTNegotiation(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'POSTNegotiation'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_DELETENegotiation/3}).
-dialyzer({nowarn_function,v_msg_DELETENegotiation/3}).
v_msg_DELETENegotiation(#'DELETENegotiation'{productName
						 = F1,
					     producerName = F2},
			Path, TrUserData) ->
    v_type_string(F1, [productName | Path], TrUserData),
    v_type_string(F2, [producerName | Path], TrUserData),
    ok;
v_msg_DELETENegotiation(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DELETENegotiation'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_GETEntities/3}).
-dialyzer({nowarn_function,v_msg_GETEntities/3}).
v_msg_GETEntities(#'GETEntities'{'Entities' = F1}, Path,
		  TrUserData) ->
    'v_enum_GETEntities.Type'(F1, ['Entities' | Path],
			      TrUserData),
    ok;
v_msg_GETEntities(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GETEntities'}, X, Path).

-compile({nowarn_unused_function,v_msg_GETEntitiesResponse/3}).
-dialyzer({nowarn_function,v_msg_GETEntitiesResponse/3}).
v_msg_GETEntitiesResponse(#'GETEntitiesResponse'{entities
						     = F1},
			  Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_string(Elem, [entities | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F1,
			 [entities | Path])
    end,
    ok;
v_msg_GETEntitiesResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GETEntitiesResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_GETProducerInfo/3}).
-dialyzer({nowarn_function,v_msg_GETProducerInfo/3}).
v_msg_GETProducerInfo(#'GETProducerInfo'{username = F1,
					 producerName = F2},
		      Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData),
    v_type_string(F2, [producerName | Path], TrUserData),
    ok;
v_msg_GETProducerInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GETProducerInfo'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_GETProducerInfoResponse/3}).
-dialyzer({nowarn_function,v_msg_GETProducerInfoResponse/3}).
v_msg_GETProducerInfoResponse(#'GETProducerInfoResponse'{negotiations
							     = F1},
			      Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_POSTNegotiation(Elem, [negotiations | Path],
				      TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'POSTNegotiation'}},
			 F1, [negotiations | Path])
    end,
    ok;
v_msg_GETProducerInfoResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GETProducerInfoResponse'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_Subscribe/3}).
-dialyzer({nowarn_function,v_msg_Subscribe/3}).
v_msg_Subscribe(#'Subscribe'{username = F1,
			     producerName = F2, productName = F3},
		Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData),
    v_type_string(F2, [producerName | Path], TrUserData),
    v_type_string(F3, [productName | Path], TrUserData),
    ok;
v_msg_Subscribe(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Subscribe'}, X, Path).

-compile({nowarn_unused_function,v_msg_Unsubscribe/3}).
-dialyzer({nowarn_function,v_msg_Unsubscribe/3}).
v_msg_Unsubscribe(#'Unsubscribe'{username = F1,
				 producerName = F2, productName = F3},
		  Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData),
    v_type_string(F2, [producerName | Path], TrUserData),
    v_type_string(F3, [productName | Path], TrUserData),
    ok;
v_msg_Unsubscribe(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Unsubscribe'}, X, Path).

-compile({nowarn_unused_function,'v_enum_Authentication.AuthType'/3}).
-dialyzer({nowarn_function,'v_enum_Authentication.AuthType'/3}).
'v_enum_Authentication.AuthType'('REGISTER', _Path,
				 _TrUserData) ->
    ok;
'v_enum_Authentication.AuthType'('LOGIN', _Path,
				 _TrUserData) ->
    ok;
'v_enum_Authentication.AuthType'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Authentication.AuthType'(X, Path,
				 _TrUserData) ->
    mk_type_error({invalid_enum, 'Authentication.AuthType'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_Authentication.UserType'/3}).
-dialyzer({nowarn_function,'v_enum_Authentication.UserType'/3}).
'v_enum_Authentication.UserType'('PRODUCER', _Path,
				 _TrUserData) ->
    ok;
'v_enum_Authentication.UserType'('IMPORTER', _Path,
				 _TrUserData) ->
    ok;
'v_enum_Authentication.UserType'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Authentication.UserType'(X, Path,
				 _TrUserData) ->
    mk_type_error({invalid_enum, 'Authentication.UserType'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_GETEntities.Type'/3}).
-dialyzer({nowarn_function,'v_enum_GETEntities.Type'/3}).
'v_enum_GETEntities.Type'('PRODUCERS', _Path,
			  _TrUserData) ->
    ok;
'v_enum_GETEntities.Type'('IMPORTERS', _Path,
			  _TrUserData) ->
    ok;
'v_enum_GETEntities.Type'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_GETEntities.Type'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'GETEntities.Type'}, X,
		  Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'Authentication.AuthType'},
      [{'REGISTER', 0}, {'LOGIN', 1}]},
     {{enum, 'Authentication.UserType'},
      [{'PRODUCER', 0}, {'IMPORTER', 1}]},
     {{enum, 'GETEntities.Type'},
      [{'PRODUCERS', 0}, {'IMPORTERS', 1}]},
     {{msg, 'Authentication'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'Authentication.AuthType'},
	      occurrence = required, opts = []},
       #field{name = userType, fnum = 2, rnum = 3,
	      type = {enum, 'Authentication.UserType'},
	      occurrence = required, opts = []},
       #field{name = username, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []},
       #field{name = password, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'Transaction'},
      [#gpb_oneof{name = txn, rnum = 2,
		  fields =
		      [#field{name = produce, fnum = 1, rnum = 2,
			      type = {msg, 'Produce'}, occurrence = optional,
			      opts = []},
		       #field{name = import, fnum = 2, rnum = 2,
			      type = {msg, 'Import'}, occurrence = optional,
			      opts = []}]}]},
     {{msg, 'Produce'},
      [#field{name = productName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = producerName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = minimumAmount, fnum = 3, rnum = 4,
	      type = int64, occurrence = required, opts = []},
       #field{name = maximumAmount, fnum = 4, rnum = 5,
	      type = int64, occurrence = required, opts = []},
       #field{name = minimumUnitaryPrice, fnum = 5, rnum = 6,
	      type = int64, occurrence = required, opts = []},
       #field{name = negotiationPeriod, fnum = 6, rnum = 7,
	      type = int64, occurrence = required, opts = []}]},
     {{msg, 'Import'},
      [#field{name = productName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = producerName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = importerName, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []},
       #field{name = quantity, fnum = 4, rnum = 5,
	      type = int64, occurrence = required, opts = []},
       #field{name = unitaryPrice, fnum = 5, rnum = 6,
	      type = int64, occurrence = required, opts = []}]},
     {{msg, 'ServerResponse'},
      [#field{name = success, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []}]},
     {{msg, 'CatalogRequest'},
      [#gpb_oneof{name = request, rnum = 2,
		  fields =
		      [#field{name = nn, fnum = 1, rnum = 2,
			      type = {msg, 'POSTNegotiation'},
			      occurrence = optional, opts = []},
		       #field{name = no, fnum = 2, rnum = 2,
			      type = {msg, 'DELETENegotiation'},
			      occurrence = optional, opts = []},
		       #field{name = gpi, fnum = 3, rnum = 2,
			      type = {msg, 'GETProducerInfo'},
			      occurrence = optional, opts = []},
		       #field{name = ge, fnum = 4, rnum = 2,
			      type = {msg, 'GETEntities'},
			      occurrence = optional, opts = []},
		       #field{name = sub, fnum = 5, rnum = 2,
			      type = {msg, 'Subscribe'}, occurrence = optional,
			      opts = []},
		       #field{name = unsub, fnum = 6, rnum = 2,
			      type = {msg, 'Unsubscribe'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'POSTNegotiation'},
      [#field{name = productName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = producerName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = minimumAmount, fnum = 3, rnum = 4,
	      type = int64, occurrence = required, opts = []},
       #field{name = maximumAmount, fnum = 4, rnum = 5,
	      type = int64, occurrence = required, opts = []},
       #field{name = minimumUnitaryPrice, fnum = 5, rnum = 6,
	      type = int64, occurrence = required, opts = []},
       #field{name = negotiationPeriod, fnum = 6, rnum = 7,
	      type = int64, occurrence = required, opts = []}]},
     {{msg, 'DELETENegotiation'},
      [#field{name = productName, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = producerName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'GETEntities'},
      [#field{name = 'Entities', fnum = 1, rnum = 2,
	      type = {enum, 'GETEntities.Type'},
	      occurrence = required, opts = []}]},
     {{msg, 'GETEntitiesResponse'},
      [#field{name = entities, fnum = 1, rnum = 2,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, 'GETProducerInfo'},
      [#field{name = username, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = producerName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'GETProducerInfoResponse'},
      [#field{name = negotiations, fnum = 1, rnum = 2,
	      type = {msg, 'POSTNegotiation'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Subscribe'},
      [#field{name = username, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = producerName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []}]},
     {{msg, 'Unsubscribe'},
      [#field{name = username, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = producerName, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = productName, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []}]}].


get_msg_names() ->
    ['Authentication', 'Transaction', 'Produce', 'Import',
     'ServerResponse', 'CatalogRequest', 'POSTNegotiation',
     'DELETENegotiation', 'GETEntities',
     'GETEntitiesResponse', 'GETProducerInfo',
     'GETProducerInfoResponse', 'Subscribe', 'Unsubscribe'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Authentication', 'Transaction', 'Produce', 'Import',
     'ServerResponse', 'CatalogRequest', 'POSTNegotiation',
     'DELETENegotiation', 'GETEntities',
     'GETEntitiesResponse', 'GETProducerInfo',
     'GETProducerInfoResponse', 'Subscribe', 'Unsubscribe'].


get_enum_names() ->
    ['Authentication.AuthType', 'Authentication.UserType',
     'GETEntities.Type'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('Authentication') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'Authentication.AuthType'},
	    occurrence = required, opts = []},
     #field{name = userType, fnum = 2, rnum = 3,
	    type = {enum, 'Authentication.UserType'},
	    occurrence = required, opts = []},
     #field{name = username, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []},
     #field{name = password, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []}];
find_msg_def('Transaction') ->
    [#gpb_oneof{name = txn, rnum = 2,
		fields =
		    [#field{name = produce, fnum = 1, rnum = 2,
			    type = {msg, 'Produce'}, occurrence = optional,
			    opts = []},
		     #field{name = import, fnum = 2, rnum = 2,
			    type = {msg, 'Import'}, occurrence = optional,
			    opts = []}]}];
find_msg_def('Produce') ->
    [#field{name = productName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = producerName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = minimumAmount, fnum = 3, rnum = 4,
	    type = int64, occurrence = required, opts = []},
     #field{name = maximumAmount, fnum = 4, rnum = 5,
	    type = int64, occurrence = required, opts = []},
     #field{name = minimumUnitaryPrice, fnum = 5, rnum = 6,
	    type = int64, occurrence = required, opts = []},
     #field{name = negotiationPeriod, fnum = 6, rnum = 7,
	    type = int64, occurrence = required, opts = []}];
find_msg_def('Import') ->
    [#field{name = productName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = producerName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = importerName, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []},
     #field{name = quantity, fnum = 4, rnum = 5,
	    type = int64, occurrence = required, opts = []},
     #field{name = unitaryPrice, fnum = 5, rnum = 6,
	    type = int64, occurrence = required, opts = []}];
find_msg_def('ServerResponse') ->
    [#field{name = success, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []}];
find_msg_def('CatalogRequest') ->
    [#gpb_oneof{name = request, rnum = 2,
		fields =
		    [#field{name = nn, fnum = 1, rnum = 2,
			    type = {msg, 'POSTNegotiation'},
			    occurrence = optional, opts = []},
		     #field{name = no, fnum = 2, rnum = 2,
			    type = {msg, 'DELETENegotiation'},
			    occurrence = optional, opts = []},
		     #field{name = gpi, fnum = 3, rnum = 2,
			    type = {msg, 'GETProducerInfo'},
			    occurrence = optional, opts = []},
		     #field{name = ge, fnum = 4, rnum = 2,
			    type = {msg, 'GETEntities'}, occurrence = optional,
			    opts = []},
		     #field{name = sub, fnum = 5, rnum = 2,
			    type = {msg, 'Subscribe'}, occurrence = optional,
			    opts = []},
		     #field{name = unsub, fnum = 6, rnum = 2,
			    type = {msg, 'Unsubscribe'}, occurrence = optional,
			    opts = []}]}];
find_msg_def('POSTNegotiation') ->
    [#field{name = productName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = producerName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = minimumAmount, fnum = 3, rnum = 4,
	    type = int64, occurrence = required, opts = []},
     #field{name = maximumAmount, fnum = 4, rnum = 5,
	    type = int64, occurrence = required, opts = []},
     #field{name = minimumUnitaryPrice, fnum = 5, rnum = 6,
	    type = int64, occurrence = required, opts = []},
     #field{name = negotiationPeriod, fnum = 6, rnum = 7,
	    type = int64, occurrence = required, opts = []}];
find_msg_def('DELETENegotiation') ->
    [#field{name = productName, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = producerName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def('GETEntities') ->
    [#field{name = 'Entities', fnum = 1, rnum = 2,
	    type = {enum, 'GETEntities.Type'},
	    occurrence = required, opts = []}];
find_msg_def('GETEntitiesResponse') ->
    [#field{name = entities, fnum = 1, rnum = 2,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def('GETProducerInfo') ->
    [#field{name = username, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = producerName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []}];
find_msg_def('GETProducerInfoResponse') ->
    [#field{name = negotiations, fnum = 1, rnum = 2,
	    type = {msg, 'POSTNegotiation'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Subscribe') ->
    [#field{name = username, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = producerName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []}];
find_msg_def('Unsubscribe') ->
    [#field{name = username, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = producerName, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = productName, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def('Authentication.AuthType') ->
    [{'REGISTER', 0}, {'LOGIN', 1}];
find_enum_def('Authentication.UserType') ->
    [{'PRODUCER', 0}, {'IMPORTER', 1}];
find_enum_def('GETEntities.Type') ->
    [{'PRODUCERS', 0}, {'IMPORTERS', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('Authentication.AuthType',
		     Value) ->
    'enum_symbol_by_value_Authentication.AuthType'(Value);
enum_symbol_by_value('Authentication.UserType',
		     Value) ->
    'enum_symbol_by_value_Authentication.UserType'(Value);
enum_symbol_by_value('GETEntities.Type', Value) ->
    'enum_symbol_by_value_GETEntities.Type'(Value).


enum_value_by_symbol('Authentication.AuthType', Sym) ->
    'enum_value_by_symbol_Authentication.AuthType'(Sym);
enum_value_by_symbol('Authentication.UserType', Sym) ->
    'enum_value_by_symbol_Authentication.UserType'(Sym);
enum_value_by_symbol('GETEntities.Type', Sym) ->
    'enum_value_by_symbol_GETEntities.Type'(Sym).


'enum_symbol_by_value_Authentication.AuthType'(0) ->
    'REGISTER';
'enum_symbol_by_value_Authentication.AuthType'(1) ->
    'LOGIN'.


'enum_value_by_symbol_Authentication.AuthType'('REGISTER') ->
    0;
'enum_value_by_symbol_Authentication.AuthType'('LOGIN') ->
    1.

'enum_symbol_by_value_Authentication.UserType'(0) ->
    'PRODUCER';
'enum_symbol_by_value_Authentication.UserType'(1) ->
    'IMPORTER'.


'enum_value_by_symbol_Authentication.UserType'('PRODUCER') ->
    0;
'enum_value_by_symbol_Authentication.UserType'('IMPORTER') ->
    1.

'enum_symbol_by_value_GETEntities.Type'(0) ->
    'PRODUCERS';
'enum_symbol_by_value_GETEntities.Type'(1) ->
    'IMPORTERS'.


'enum_value_by_symbol_GETEntities.Type'('PRODUCERS') ->
    0;
'enum_value_by_symbol_GETEntities.Type'('IMPORTERS') ->
    1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"protos.Authentication">>) -> 'Authentication';
fqbin_to_msg_name(<<"protos.Transaction">>) -> 'Transaction';
fqbin_to_msg_name(<<"protos.Produce">>) -> 'Produce';
fqbin_to_msg_name(<<"protos.Import">>) -> 'Import';
fqbin_to_msg_name(<<"protos.ServerResponse">>) -> 'ServerResponse';
fqbin_to_msg_name(<<"protos.CatalogRequest">>) -> 'CatalogRequest';
fqbin_to_msg_name(<<"protos.POSTNegotiation">>) -> 'POSTNegotiation';
fqbin_to_msg_name(<<"protos.DELETENegotiation">>) -> 'DELETENegotiation';
fqbin_to_msg_name(<<"protos.GETEntities">>) -> 'GETEntities';
fqbin_to_msg_name(<<"protos.GETEntitiesResponse">>) -> 'GETEntitiesResponse';
fqbin_to_msg_name(<<"protos.GETProducerInfo">>) -> 'GETProducerInfo';
fqbin_to_msg_name(<<"protos.GETProducerInfoResponse">>) -> 'GETProducerInfoResponse';
fqbin_to_msg_name(<<"protos.Subscribe">>) -> 'Subscribe';
fqbin_to_msg_name(<<"protos.Unsubscribe">>) -> 'Unsubscribe';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('Authentication') -> <<"protos.Authentication">>;
msg_name_to_fqbin('Transaction') -> <<"protos.Transaction">>;
msg_name_to_fqbin('Produce') -> <<"protos.Produce">>;
msg_name_to_fqbin('Import') -> <<"protos.Import">>;
msg_name_to_fqbin('ServerResponse') -> <<"protos.ServerResponse">>;
msg_name_to_fqbin('CatalogRequest') -> <<"protos.CatalogRequest">>;
msg_name_to_fqbin('POSTNegotiation') -> <<"protos.POSTNegotiation">>;
msg_name_to_fqbin('DELETENegotiation') -> <<"protos.DELETENegotiation">>;
msg_name_to_fqbin('GETEntities') -> <<"protos.GETEntities">>;
msg_name_to_fqbin('GETEntitiesResponse') -> <<"protos.GETEntitiesResponse">>;
msg_name_to_fqbin('GETProducerInfo') -> <<"protos.GETProducerInfo">>;
msg_name_to_fqbin('GETProducerInfoResponse') -> <<"protos.GETProducerInfoResponse">>;
msg_name_to_fqbin('Subscribe') -> <<"protos.Subscribe">>;
msg_name_to_fqbin('Unsubscribe') -> <<"protos.Unsubscribe">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"protos.Authentication.AuthType">>) ->
    'Authentication.AuthType';
fqbin_to_enum_name(<<"protos.Authentication.UserType">>) ->
    'Authentication.UserType';
fqbin_to_enum_name(<<"protos.GETEntities.Type">>) -> 'GETEntities.Type';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('Authentication.AuthType') ->
    <<"protos.Authentication.AuthType">>;
enum_name_to_fqbin('Authentication.UserType') ->
    <<"protos.Authentication.UserType">>;
enum_name_to_fqbin('GETEntities.Type') -> <<"protos.GETEntities.Type">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> protos.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "protos.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["protos.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["protos"].


get_msg_containment("protos") ->
    ['Authentication', 'CatalogRequest',
     'DELETENegotiation', 'GETEntities',
     'GETEntitiesResponse', 'GETProducerInfo',
     'GETProducerInfoResponse', 'Import', 'POSTNegotiation',
     'Produce', 'ServerResponse', 'Subscribe', 'Transaction',
     'Unsubscribe'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("protos") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("protos") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("protos") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("protos") ->
    ['Authentication.AuthType', 'Authentication.UserType',
     'GETEntities.Type'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"protos.GETEntities">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.Import">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.CatalogRequest">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.Unsubscribe">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.Subscribe">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.ServerResponse">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.Produce">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.GETProducerInfoResponse">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.GETEntitiesResponse">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.Transaction">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.POSTNegotiation">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.DELETENegotiation">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.Authentication">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.GETProducerInfo">>) -> "protos";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"protos.GETEntities.Type">>) -> "protos";
get_proto_by_enum_name_as_fqbin(<<"protos.Authentication.UserType">>) -> "protos";
get_proto_by_enum_name_as_fqbin(<<"protos.Authentication.AuthType">>) -> "protos";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.11.0".

gpb_version_as_list() ->
    [4,11,0].
