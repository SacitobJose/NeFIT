%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.0
-module(protos).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_Authentication.AuthType'/1, 'enum_value_by_symbol_Authentication.AuthType'/1]).
-export(['enum_symbol_by_value_Authentication.UserType'/1, 'enum_value_by_symbol_Authentication.UserType'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'Authentication.AuthType'() :: 'REGISTER' | 'LOGIN'.
-type 'Authentication.UserType'() :: 'PRODUCER' | 'IMPORTER'.
-export_type(['Authentication.AuthType'/0, 'Authentication.UserType'/0]).

%% message types
-type 'Authentication'() ::
      #{type                    := 'REGISTER' | 'LOGIN' | integer(), % = 1, enum Authentication.AuthType
        userType                := 'PRODUCER' | 'IMPORTER' | integer(), % = 2, enum Authentication.UserType
        username                := iodata(),        % = 3
        password                := iodata()         % = 4
       }.

-type 'ServerResponse'() ::
      #{success                 := boolean() | 0 | 1 % = 1
       }.

-type 'Produce'() ::
      #{productName             := iodata(),        % = 1
        minimumAmount           := integer(),       % = 2, 32 bits
        maximumAmount           := integer(),       % = 3, 32 bits
        minimumUnitaryPrice     := integer(),       % = 4, 32 bits
        negotiationPeriod       := integer()        % = 5, 32 bits
       }.

-type 'Import'() ::
      #{productName             := iodata(),        % = 1
        producerName            := iodata(),        % = 2
        quantity                := integer(),       % = 3, 32 bits
        unitaryPrice            := integer()        % = 4, 32 bits
       }.

-type 'SubscribeProducer'() ::
      #{username                := iodata(),        % = 1
        producerName            := iodata()         % = 2
       }.

-type 'UnsubscribeProducer'() ::
      #{username                := iodata(),        % = 1
        producerName            := iodata()         % = 2
       }.

-type 'SaleInfo'() ::
      #{username                := iodata(),        % = 1
        quantity                := integer(),       % = 2, 32 bits
        price                   := integer()        % = 3, 32 bits
       }.

-type 'DealerTimeout'() ::
      #{success                 := boolean() | 0 | 1, % = 1
        producerName            := iodata(),        % = 2
        productName             := iodata(),        % = 3
        sales                   => ['SaleInfo'()]   % = 4
       }.

-type 'ResponseImport'() ::
      #{producerName            := iodata(),        % = 1
        sale                    := 'SaleInfo'()     % = 2
       }.

-export_type(['Authentication'/0, 'ServerResponse'/0, 'Produce'/0, 'Import'/0, 'SubscribeProducer'/0, 'UnsubscribeProducer'/0, 'SaleInfo'/0, 'DealerTimeout'/0, 'ResponseImport'/0]).

-spec encode_msg('Authentication'() | 'ServerResponse'() | 'Produce'() | 'Import'() | 'SubscribeProducer'() | 'UnsubscribeProducer'() | 'SaleInfo'() | 'DealerTimeout'() | 'ResponseImport'(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg('Authentication'() | 'ServerResponse'() | 'Produce'() | 'Import'() | 'SubscribeProducer'() | 'UnsubscribeProducer'() | 'SaleInfo'() | 'DealerTimeout'() | 'ResponseImport'(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Authentication' ->
	  encode_msg_Authentication(id(Msg, TrUserData),
				    TrUserData);
      'ServerResponse' ->
	  encode_msg_ServerResponse(id(Msg, TrUserData),
				    TrUserData);
      'Produce' ->
	  encode_msg_Produce(id(Msg, TrUserData), TrUserData);
      'Import' ->
	  encode_msg_Import(id(Msg, TrUserData), TrUserData);
      'SubscribeProducer' ->
	  encode_msg_SubscribeProducer(id(Msg, TrUserData),
				       TrUserData);
      'UnsubscribeProducer' ->
	  encode_msg_UnsubscribeProducer(id(Msg, TrUserData),
					 TrUserData);
      'SaleInfo' ->
	  encode_msg_SaleInfo(id(Msg, TrUserData), TrUserData);
      'DealerTimeout' ->
	  encode_msg_DealerTimeout(id(Msg, TrUserData),
				   TrUserData);
      'ResponseImport' ->
	  encode_msg_ResponseImport(id(Msg, TrUserData),
				    TrUserData)
    end.


encode_msg_Authentication(Msg, TrUserData) ->
    encode_msg_Authentication(Msg, <<>>, TrUserData).


encode_msg_Authentication(#{type := F1, userType := F2,
			    username := F3, password := F4},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   'e_enum_Authentication.AuthType'(TrF1,
					    <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   'e_enum_Authentication.UserType'(TrF2,
					    <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
    end.

encode_msg_ServerResponse(Msg, TrUserData) ->
    encode_msg_ServerResponse(Msg, <<>>, TrUserData).


encode_msg_ServerResponse(#{success := F1}, Bin,
			  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_Produce(Msg, TrUserData) ->
    encode_msg_Produce(Msg, <<>>, TrUserData).


encode_msg_Produce(#{productName := F1,
		     minimumAmount := F2, maximumAmount := F3,
		     minimumUnitaryPrice := F4, negotiationPeriod := F5},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int64(TrF5, <<B4/binary, 40>>, TrUserData)
    end.

encode_msg_Import(Msg, TrUserData) ->
    encode_msg_Import(Msg, <<>>, TrUserData).


encode_msg_Import(#{productName := F1,
		    producerName := F2, quantity := F3, unitaryPrice := F4},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
    end.

encode_msg_SubscribeProducer(Msg, TrUserData) ->
    encode_msg_SubscribeProducer(Msg, <<>>, TrUserData).


encode_msg_SubscribeProducer(#{username := F1,
			       producerName := F2},
			     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_UnsubscribeProducer(Msg, TrUserData) ->
    encode_msg_UnsubscribeProducer(Msg, <<>>, TrUserData).


encode_msg_UnsubscribeProducer(#{username := F1,
				 producerName := F2},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_SaleInfo(Msg, TrUserData) ->
    encode_msg_SaleInfo(Msg, <<>>, TrUserData).


encode_msg_SaleInfo(#{username := F1, quantity := F2,
		      price := F3},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_DealerTimeout(Msg, TrUserData) ->
    encode_msg_DealerTimeout(Msg, <<>>, TrUserData).


encode_msg_DealerTimeout(#{success := F1,
			   producerName := F2, productName := F3} =
			     M,
			 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	 end,
    case M of
      #{sales := F4} ->
	  TrF4 = id(F4, TrUserData),
	  if TrF4 == [] -> B3;
	     true ->
		 e_field_DealerTimeout_sales(TrF4, B3, TrUserData)
	  end;
      _ -> B3
    end.

encode_msg_ResponseImport(Msg, TrUserData) ->
    encode_msg_ResponseImport(Msg, <<>>, TrUserData).


encode_msg_ResponseImport(#{producerName := F1,
			    sale := F2},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_mfield_ResponseImport_sale(TrF2, <<B1/binary, 18>>,
				   TrUserData)
    end.

e_mfield_DealerTimeout_sales(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_SaleInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_DealerTimeout_sales([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_DealerTimeout_sales(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_DealerTimeout_sales(Rest, Bin3, TrUserData);
e_field_DealerTimeout_sales([], Bin, _TrUserData) ->
    Bin.

e_mfield_ResponseImport_sale(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_SaleInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_Authentication.AuthType'('REGISTER', Bin,
				 _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_Authentication.AuthType'('LOGIN', Bin,
				 _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Authentication.AuthType'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_Authentication.UserType'('PRODUCER', Bin,
				 _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_Authentication.UserType'('IMPORTER', Bin,
				 _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_Authentication.UserType'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Authentication', Bin, TrUserData) ->
    id(decode_msg_Authentication(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ServerResponse', Bin, TrUserData) ->
    id(decode_msg_ServerResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Produce', Bin, TrUserData) ->
    id(decode_msg_Produce(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Import', Bin, TrUserData) ->
    id(decode_msg_Import(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SubscribeProducer', Bin,
		  TrUserData) ->
    id(decode_msg_SubscribeProducer(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('UnsubscribeProducer', Bin,
		  TrUserData) ->
    id(decode_msg_UnsubscribeProducer(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('SaleInfo', Bin, TrUserData) ->
    id(decode_msg_SaleInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit('DealerTimeout', Bin, TrUserData) ->
    id(decode_msg_DealerTimeout(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ResponseImport', Bin, TrUserData) ->
    id(decode_msg_ResponseImport(Bin, TrUserData),
       TrUserData).



decode_msg_Authentication(Bin, TrUserData) ->
    dfp_read_field_def_Authentication(Bin, 0, 0,
				      id('$undef', TrUserData),
				      id('$undef', TrUserData),
				      id('$undef', TrUserData),
				      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Authentication(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Authentication_type(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_Authentication(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Authentication_userType(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Authentication(<<26, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Authentication_username(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Authentication(<<34, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Authentication_password(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_Authentication(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, _) ->
    #{type => F@_1, userType => F@_2, username => F@_3,
      password => F@_4};
dfp_read_field_def_Authentication(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_Authentication(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_Authentication(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Authentication(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
dg_read_field_def_Authentication(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Authentication_type(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      16 ->
	  d_field_Authentication_userType(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      26 ->
	  d_field_Authentication_username(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      34 ->
	  d_field_Authentication_password(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Authentication(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
	    1 ->
		skip_64_Authentication(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData);
	    2 ->
		skip_length_delimited_Authentication(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4,
						     TrUserData);
	    3 ->
		skip_group_Authentication(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_Authentication(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData)
	  end
    end;
dg_read_field_def_Authentication(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, _) ->
    #{type => F@_1, userType => F@_2, username => F@_3,
      password => F@_4}.

d_field_Authentication_type(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Authentication_type(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Authentication_type(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_Authentication.AuthType'(begin
					       <<Res:32/signed-native>> = <<(X
									       bsl
									       N
									       +
									       Acc):32/unsigned-native>>,
					       id(Res, TrUserData)
					     end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_Authentication(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_Authentication_userType(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Authentication_userType(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_Authentication_userType(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_Authentication.UserType'(begin
					       <<Res:32/signed-native>> = <<(X
									       bsl
									       N
									       +
									       Acc):32/unsigned-native>>,
					       id(Res, TrUserData)
					     end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_Authentication(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, F@_4, TrUserData).

d_field_Authentication_username(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Authentication_username(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_Authentication_username(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Authentication(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, F@_4, TrUserData).

d_field_Authentication_password(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Authentication_password(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_Authentication_password(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Authentication(RestF, 0, 0, F@_1,
				      F@_2, F@_3, NewFValue, TrUserData).

skip_varint_Authentication(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_Authentication(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
skip_varint_Authentication(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Authentication(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_Authentication(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_Authentication(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
skip_length_delimited_Authentication(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Authentication(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_group_Authentication(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Authentication(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_32_Authentication(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Authentication(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

skip_64_Authentication(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Authentication(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

decode_msg_ServerResponse(Bin, TrUserData) ->
    dfp_read_field_def_ServerResponse(Bin, 0, 0,
				      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_ServerResponse(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerResponse_success(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_ServerResponse(<<>>, 0, 0, F@_1,
				  _) ->
    #{success => F@_1};
dfp_read_field_def_ServerResponse(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_ServerResponse(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_ServerResponse(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerResponse(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ServerResponse(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ServerResponse_success(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerResponse(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_ServerResponse(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ServerResponse(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_ServerResponse(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_ServerResponse(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ServerResponse(<<>>, 0, 0, F@_1, _) ->
    #{success => F@_1}.

d_field_ServerResponse_success(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerResponse_success(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_ServerResponse_success(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_ServerResponse(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_ServerResponse(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_ServerResponse(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_ServerResponse(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ServerResponse(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_ServerResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerResponse(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ServerResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerResponse(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_ServerResponse(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerResponse(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_ServerResponse(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_ServerResponse(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_ServerResponse(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_ServerResponse(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_Produce(Bin, TrUserData) ->
    dfp_read_field_def_Produce(Bin, 0, 0,
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData),
			       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Produce(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Produce_productName(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Produce(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Produce_minimumAmount(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Produce(<<24, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Produce_maximumAmount(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Produce(<<32, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Produce_minimumUnitaryPrice(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Produce(<<40, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_Produce_negotiationPeriod(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Produce(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, _) ->
    #{productName => F@_1, minimumAmount => F@_2,
      maximumAmount => F@_3, minimumUnitaryPrice => F@_4,
      negotiationPeriod => F@_5};
dfp_read_field_def_Produce(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_Produce(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_Produce(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Produce(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_Produce(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Produce_productName(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      16 ->
	  d_field_Produce_minimumAmount(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_Produce_maximumAmount(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, TrUserData);
      32 ->
	  d_field_Produce_minimumUnitaryPrice(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
      40 ->
	  d_field_Produce_negotiationPeriod(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Produce(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, TrUserData);
	    1 ->
		skip_64_Produce(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData);
	    2 ->
		skip_length_delimited_Produce(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_Produce(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_Produce(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData)
	  end
    end;
dg_read_field_def_Produce(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, _) ->
    #{productName => F@_1, minimumAmount => F@_2,
      maximumAmount => F@_3, minimumUnitaryPrice => F@_4,
      negotiationPeriod => F@_5}.

d_field_Produce_productName(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Produce_productName(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Produce_productName(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Produce(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_Produce_minimumAmount(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Produce_minimumAmount(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
d_field_Produce_minimumAmount(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Produce(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_Produce_maximumAmount(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_Produce_maximumAmount(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
d_field_Produce_maximumAmount(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Produce(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, F@_5, TrUserData).

d_field_Produce_minimumUnitaryPrice(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    d_field_Produce_minimumUnitaryPrice(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
d_field_Produce_minimumUnitaryPrice(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Produce(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, F@_5, TrUserData).

d_field_Produce_negotiationPeriod(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 57 ->
    d_field_Produce_negotiationPeriod(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
d_field_Produce_negotiationPeriod(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Produce(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, TrUserData).

skip_varint_Produce(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_Produce(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
skip_varint_Produce(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Produce(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_Produce(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_Produce(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
skip_length_delimited_Produce(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Produce(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_group_Produce(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Produce(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_32_Produce(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Produce(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_64_Produce(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_Produce(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

decode_msg_Import(Bin, TrUserData) ->
    dfp_read_field_def_Import(Bin, 0, 0,
			      id('$undef', TrUserData),
			      id('$undef', TrUserData),
			      id('$undef', TrUserData),
			      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Import(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Import_productName(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_Import(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Import_producerName(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_Import(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Import_quantity(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_Import(<<32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Import_unitaryPrice(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_Import(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, _) ->
    #{productName => F@_1, producerName => F@_2,
      quantity => F@_3, unitaryPrice => F@_4};
dfp_read_field_def_Import(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, TrUserData) ->
    dg_read_field_def_Import(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData).

dg_read_field_def_Import(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Import(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_Import(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Import_productName(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      18 ->
	  d_field_Import_producerName(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      24 ->
	  d_field_Import_quantity(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      32 ->
	  d_field_Import_unitaryPrice(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Import(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
	    1 ->
		skip_64_Import(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
	    2 ->
		skip_length_delimited_Import(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_Import(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
	    5 ->
		skip_32_Import(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData)
	  end
    end;
dg_read_field_def_Import(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, _) ->
    #{productName => F@_1, producerName => F@_2,
      quantity => F@_3, unitaryPrice => F@_4}.

d_field_Import_productName(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Import_productName(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Import_productName(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Import(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, TrUserData).

d_field_Import_producerName(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Import_producerName(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Import_producerName(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Import(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, TrUserData).

d_field_Import_quantity(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Import_quantity(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Import_quantity(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Import(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, TrUserData).

d_field_Import_unitaryPrice(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Import_unitaryPrice(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Import_unitaryPrice(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_Import(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, TrUserData).

skip_varint_Import(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_Import(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       TrUserData);
skip_varint_Import(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Import(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

skip_length_delimited_Import(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_Import(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_Import(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Import(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, TrUserData).

skip_group_Import(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Import(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, TrUserData).

skip_32_Import(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Import(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

skip_64_Import(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Import(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

decode_msg_SubscribeProducer(Bin, TrUserData) ->
    dfp_read_field_def_SubscribeProducer(Bin, 0, 0,
					 id('$undef', TrUserData),
					 id('$undef', TrUserData), TrUserData).

dfp_read_field_def_SubscribeProducer(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_SubscribeProducer_username(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_SubscribeProducer(<<18,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_SubscribeProducer_producerName(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
dfp_read_field_def_SubscribeProducer(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{username => F@_1, producerName => F@_2};
dfp_read_field_def_SubscribeProducer(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_SubscribeProducer(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_SubscribeProducer(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SubscribeProducer(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_SubscribeProducer(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SubscribeProducer_username(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      18 ->
	  d_field_SubscribeProducer_producerName(Rest, 0, 0, F@_1,
						 F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SubscribeProducer(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_SubscribeProducer(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_SubscribeProducer(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_SubscribeProducer(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_SubscribeProducer(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_SubscribeProducer(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #{username => F@_1, producerName => F@_2}.

d_field_SubscribeProducer_username(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_SubscribeProducer_username(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_SubscribeProducer_username(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_SubscribeProducer(RestF, 0, 0,
					 NewFValue, F@_2, TrUserData).

d_field_SubscribeProducer_producerName(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_SubscribeProducer_producerName(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
d_field_SubscribeProducer_producerName(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_SubscribeProducer(RestF, 0, 0, F@_1,
					 NewFValue, TrUserData).

skip_varint_SubscribeProducer(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_SubscribeProducer(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_SubscribeProducer(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_SubscribeProducer(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_SubscribeProducer(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_SubscribeProducer(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_SubscribeProducer(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SubscribeProducer(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_SubscribeProducer(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SubscribeProducer(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_SubscribeProducer(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_SubscribeProducer(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_SubscribeProducer(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_SubscribeProducer(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

decode_msg_UnsubscribeProducer(Bin, TrUserData) ->
    dfp_read_field_def_UnsubscribeProducer(Bin, 0, 0,
					   id('$undef', TrUserData),
					   id('$undef', TrUserData),
					   TrUserData).

dfp_read_field_def_UnsubscribeProducer(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_UnsubscribeProducer_username(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_UnsubscribeProducer(<<18,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_UnsubscribeProducer_producerName(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData);
dfp_read_field_def_UnsubscribeProducer(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #{username => F@_1, producerName => F@_2};
dfp_read_field_def_UnsubscribeProducer(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    dg_read_field_def_UnsubscribeProducer(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

dg_read_field_def_UnsubscribeProducer(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_UnsubscribeProducer(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
dg_read_field_def_UnsubscribeProducer(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_UnsubscribeProducer_username(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      18 ->
	  d_field_UnsubscribeProducer_producerName(Rest, 0, 0,
						   F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UnsubscribeProducer(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		skip_64_UnsubscribeProducer(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		skip_length_delimited_UnsubscribeProducer(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		skip_group_UnsubscribeProducer(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		skip_32_UnsubscribeProducer(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
dg_read_field_def_UnsubscribeProducer(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{username => F@_1, producerName => F@_2}.

d_field_UnsubscribeProducer_username(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_UnsubscribeProducer_username(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_UnsubscribeProducer_username(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_UnsubscribeProducer(RestF, 0, 0,
					   NewFValue, F@_2, TrUserData).

d_field_UnsubscribeProducer_producerName(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_UnsubscribeProducer_producerName(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
d_field_UnsubscribeProducer_producerName(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_UnsubscribeProducer(RestF, 0, 0,
					   F@_1, NewFValue, TrUserData).

skip_varint_UnsubscribeProducer(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_UnsubscribeProducer(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
skip_varint_UnsubscribeProducer(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_UnsubscribeProducer(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_length_delimited_UnsubscribeProducer(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_UnsubscribeProducer(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
skip_length_delimited_UnsubscribeProducer(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UnsubscribeProducer(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

skip_group_UnsubscribeProducer(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UnsubscribeProducer(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

skip_32_UnsubscribeProducer(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_UnsubscribeProducer(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_64_UnsubscribeProducer(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_UnsubscribeProducer(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

decode_msg_SaleInfo(Bin, TrUserData) ->
    dfp_read_field_def_SaleInfo(Bin, 0, 0,
				id('$undef', TrUserData),
				id('$undef', TrUserData),
				id('$undef', TrUserData), TrUserData).

dfp_read_field_def_SaleInfo(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_SaleInfo_username(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_SaleInfo(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_SaleInfo_quantity(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_SaleInfo(<<24, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_SaleInfo_price(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_SaleInfo(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #{username => F@_1, quantity => F@_2, price => F@_3};
dfp_read_field_def_SaleInfo(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    dg_read_field_def_SaleInfo(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

dg_read_field_def_SaleInfo(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SaleInfo(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_SaleInfo(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SaleInfo_username(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      16 ->
	  d_field_SaleInfo_quantity(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      24 ->
	  d_field_SaleInfo_price(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SaleInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    1 ->
		skip_64_SaleInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    2 ->
		skip_length_delimited_SaleInfo(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    3 ->
		skip_group_SaleInfo(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, TrUserData);
	    5 ->
		skip_32_SaleInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData)
	  end
    end;
dg_read_field_def_SaleInfo(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #{username => F@_1, quantity => F@_2, price => F@_3}.

d_field_SaleInfo_username(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_SaleInfo_username(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_SaleInfo_username(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_SaleInfo(RestF, 0, 0, NewFValue,
				F@_2, F@_3, TrUserData).

d_field_SaleInfo_quantity(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_SaleInfo_quantity(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_SaleInfo_quantity(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_SaleInfo(RestF, 0, 0, F@_1,
				NewFValue, F@_3, TrUserData).

d_field_SaleInfo_price(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_SaleInfo_price(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_SaleInfo_price(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_SaleInfo(RestF, 0, 0, F@_1, F@_2,
				NewFValue, TrUserData).

skip_varint_SaleInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_SaleInfo(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
skip_varint_SaleInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_SaleInfo(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_length_delimited_SaleInfo(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_SaleInfo(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_SaleInfo(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SaleInfo(Rest2, 0, 0, F@_1, F@_2,
				F@_3, TrUserData).

skip_group_SaleInfo(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SaleInfo(Rest, 0, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_32_SaleInfo(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_SaleInfo(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_64_SaleInfo(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_SaleInfo(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

decode_msg_DealerTimeout(Bin, TrUserData) ->
    dfp_read_field_def_DealerTimeout(Bin, 0, 0,
				     id('$undef', TrUserData),
				     id('$undef', TrUserData),
				     id('$undef', TrUserData),
				     id([], TrUserData), TrUserData).

dfp_read_field_def_DealerTimeout(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_DealerTimeout_success(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_DealerTimeout(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_DealerTimeout_producerName(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_DealerTimeout(<<26, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_DealerTimeout_productName(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_DealerTimeout(<<34, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_DealerTimeout_sales(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_DealerTimeout(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, R1, TrUserData) ->
    S1 = #{success => F@_1, producerName => F@_2,
	   productName => F@_3},
    if R1 == '$undef' -> S1;
       true -> S1#{sales => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_DealerTimeout(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_DealerTimeout(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_DealerTimeout(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DealerTimeout(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
dg_read_field_def_DealerTimeout(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_DealerTimeout_success(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      18 ->
	  d_field_DealerTimeout_producerName(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
      26 ->
	  d_field_DealerTimeout_productName(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      34 ->
	  d_field_DealerTimeout_sales(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DealerTimeout(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, TrUserData);
	    1 ->
		skip_64_DealerTimeout(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData);
	    2 ->
		skip_length_delimited_DealerTimeout(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
	    3 ->
		skip_group_DealerTimeout(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_DealerTimeout(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData)
	  end
    end;
dg_read_field_def_DealerTimeout(<<>>, 0, 0, F@_1, F@_2,
				F@_3, R1, TrUserData) ->
    S1 = #{success => F@_1, producerName => F@_2,
	   productName => F@_3},
    if R1 == '$undef' -> S1;
       true -> S1#{sales => lists_reverse(R1, TrUserData)}
    end.

d_field_DealerTimeout_success(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_DealerTimeout_success(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_DealerTimeout_success(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_DealerTimeout(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, F@_4, TrUserData).

d_field_DealerTimeout_producerName(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_DealerTimeout_producerName(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
d_field_DealerTimeout_producerName(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DealerTimeout(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, F@_4, TrUserData).

d_field_DealerTimeout_productName(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_DealerTimeout_productName(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_DealerTimeout_productName(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DealerTimeout(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, F@_4, TrUserData).

d_field_DealerTimeout_sales(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_DealerTimeout_sales(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_DealerTimeout_sales(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_SaleInfo(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DealerTimeout(RestF, 0, 0, F@_1,
				     F@_2, F@_3,
				     cons(NewFValue, Prev, TrUserData),
				     TrUserData).

skip_varint_DealerTimeout(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_DealerTimeout(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
skip_varint_DealerTimeout(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_DealerTimeout(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_DealerTimeout(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_DealerTimeout(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
skip_length_delimited_DealerTimeout(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DealerTimeout(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_group_DealerTimeout(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DealerTimeout(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_32_DealerTimeout(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_DealerTimeout(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_64_DealerTimeout(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_DealerTimeout(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

decode_msg_ResponseImport(Bin, TrUserData) ->
    dfp_read_field_def_ResponseImport(Bin, 0, 0,
				      id('$undef', TrUserData),
				      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_ResponseImport(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ResponseImport_producerName(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_ResponseImport(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ResponseImport_sale(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_ResponseImport(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    S1 = #{producerName => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{sale => F@_2}
    end;
dfp_read_field_def_ResponseImport(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_ResponseImport(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_ResponseImport(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseImport(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_ResponseImport(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ResponseImport_producerName(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      18 ->
	  d_field_ResponseImport_sale(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResponseImport(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_ResponseImport(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_ResponseImport(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_ResponseImport(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_ResponseImport(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_ResponseImport(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    S1 = #{producerName => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{sale => F@_2}
    end.

d_field_ResponseImport_producerName(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ResponseImport_producerName(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_ResponseImport_producerName(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ResponseImport(RestF, 0, 0,
				      NewFValue, F@_2, TrUserData).

d_field_ResponseImport_sale(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ResponseImport_sale(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_ResponseImport_sale(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_SaleInfo(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ResponseImport(RestF, 0, 0, F@_1,
				      if Prev == '$undef' -> NewFValue;
					 true ->
					     merge_msg_SaleInfo(Prev, NewFValue,
								TrUserData)
				      end,
				      TrUserData).

skip_varint_ResponseImport(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ResponseImport(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_ResponseImport(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ResponseImport(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_ResponseImport(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseImport(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_ResponseImport(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseImport(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_ResponseImport(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ResponseImport(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_ResponseImport(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ResponseImport(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_ResponseImport(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ResponseImport(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

'd_enum_Authentication.AuthType'(0) -> 'REGISTER';
'd_enum_Authentication.AuthType'(1) -> 'LOGIN';
'd_enum_Authentication.AuthType'(V) -> V.

'd_enum_Authentication.UserType'(0) -> 'PRODUCER';
'd_enum_Authentication.UserType'(1) -> 'IMPORTER';
'd_enum_Authentication.UserType'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Authentication' ->
	  merge_msg_Authentication(Prev, New, TrUserData);
      'ServerResponse' ->
	  merge_msg_ServerResponse(Prev, New, TrUserData);
      'Produce' -> merge_msg_Produce(Prev, New, TrUserData);
      'Import' -> merge_msg_Import(Prev, New, TrUserData);
      'SubscribeProducer' ->
	  merge_msg_SubscribeProducer(Prev, New, TrUserData);
      'UnsubscribeProducer' ->
	  merge_msg_UnsubscribeProducer(Prev, New, TrUserData);
      'SaleInfo' -> merge_msg_SaleInfo(Prev, New, TrUserData);
      'DealerTimeout' ->
	  merge_msg_DealerTimeout(Prev, New, TrUserData);
      'ResponseImport' ->
	  merge_msg_ResponseImport(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Authentication/3}).
merge_msg_Authentication(#{},
			 #{type := NFtype, userType := NFuserType,
			   username := NFusername, password := NFpassword},
			 _) ->
    #{type => NFtype, userType => NFuserType,
      username => NFusername, password => NFpassword}.

-compile({nowarn_unused_function,merge_msg_ServerResponse/3}).
merge_msg_ServerResponse(#{}, #{success := NFsuccess},
			 _) ->
    #{success => NFsuccess}.

-compile({nowarn_unused_function,merge_msg_Produce/3}).
merge_msg_Produce(#{},
		  #{productName := NFproductName,
		    minimumAmount := NFminimumAmount,
		    maximumAmount := NFmaximumAmount,
		    minimumUnitaryPrice := NFminimumUnitaryPrice,
		    negotiationPeriod := NFnegotiationPeriod},
		  _) ->
    #{productName => NFproductName,
      minimumAmount => NFminimumAmount,
      maximumAmount => NFmaximumAmount,
      minimumUnitaryPrice => NFminimumUnitaryPrice,
      negotiationPeriod => NFnegotiationPeriod}.

-compile({nowarn_unused_function,merge_msg_Import/3}).
merge_msg_Import(#{},
		 #{productName := NFproductName,
		   producerName := NFproducerName, quantity := NFquantity,
		   unitaryPrice := NFunitaryPrice},
		 _) ->
    #{productName => NFproductName,
      producerName => NFproducerName, quantity => NFquantity,
      unitaryPrice => NFunitaryPrice}.

-compile({nowarn_unused_function,merge_msg_SubscribeProducer/3}).
merge_msg_SubscribeProducer(#{},
			    #{username := NFusername,
			      producerName := NFproducerName},
			    _) ->
    #{username => NFusername,
      producerName => NFproducerName}.

-compile({nowarn_unused_function,merge_msg_UnsubscribeProducer/3}).
merge_msg_UnsubscribeProducer(#{},
			      #{username := NFusername,
				producerName := NFproducerName},
			      _) ->
    #{username => NFusername,
      producerName => NFproducerName}.

-compile({nowarn_unused_function,merge_msg_SaleInfo/3}).
merge_msg_SaleInfo(#{},
		   #{username := NFusername, quantity := NFquantity,
		     price := NFprice},
		   _) ->
    #{username => NFusername, quantity => NFquantity,
      price => NFprice}.

-compile({nowarn_unused_function,merge_msg_DealerTimeout/3}).
merge_msg_DealerTimeout(#{} = PMsg,
			#{success := NFsuccess, producerName := NFproducerName,
			  productName := NFproductName} =
			    NMsg,
			TrUserData) ->
    S1 = #{success => NFsuccess,
	   producerName => NFproducerName,
	   productName => NFproductName},
    case {PMsg, NMsg} of
      {#{sales := PFsales}, #{sales := NFsales}} ->
	  S1#{sales => 'erlang_++'(PFsales, NFsales, TrUserData)};
      {_, #{sales := NFsales}} -> S1#{sales => NFsales};
      {#{sales := PFsales}, _} -> S1#{sales => PFsales};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_ResponseImport/3}).
merge_msg_ResponseImport(#{sale := PFsale},
			 #{producerName := NFproducerName, sale := NFsale},
			 TrUserData) ->
    #{producerName => NFproducerName,
      sale => merge_msg_SaleInfo(PFsale, NFsale, TrUserData)}.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Authentication' ->
	  v_msg_Authentication(Msg, [MsgName], TrUserData);
      'ServerResponse' ->
	  v_msg_ServerResponse(Msg, [MsgName], TrUserData);
      'Produce' -> v_msg_Produce(Msg, [MsgName], TrUserData);
      'Import' -> v_msg_Import(Msg, [MsgName], TrUserData);
      'SubscribeProducer' ->
	  v_msg_SubscribeProducer(Msg, [MsgName], TrUserData);
      'UnsubscribeProducer' ->
	  v_msg_UnsubscribeProducer(Msg, [MsgName], TrUserData);
      'SaleInfo' ->
	  v_msg_SaleInfo(Msg, [MsgName], TrUserData);
      'DealerTimeout' ->
	  v_msg_DealerTimeout(Msg, [MsgName], TrUserData);
      'ResponseImport' ->
	  v_msg_ResponseImport(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Authentication/3}).
-dialyzer({nowarn_function,v_msg_Authentication/3}).
v_msg_Authentication(#{type := F1, userType := F2,
		       username := F3, password := F4} =
			 M,
		     Path, TrUserData) ->
    'v_enum_Authentication.AuthType'(F1, [type | Path],
				     TrUserData),
    'v_enum_Authentication.UserType'(F2, [userType | Path],
				     TrUserData),
    v_type_string(F3, [username | Path], TrUserData),
    v_type_string(F4, [password | Path], TrUserData),
    lists:foreach(fun (type) -> ok;
		      (userType) -> ok;
		      (username) -> ok;
		      (password) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Authentication(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [type, userType, username, password] -- maps:keys(M),
		   'Authentication'},
		  M, Path);
v_msg_Authentication(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Authentication'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_ServerResponse/3}).
-dialyzer({nowarn_function,v_msg_ServerResponse/3}).
v_msg_ServerResponse(#{success := F1} = M, Path,
		     TrUserData) ->
    v_type_bool(F1, [success | Path], TrUserData),
    lists:foreach(fun (success) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ServerResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [success] -- maps:keys(M), 'ServerResponse'},
		  M, Path);
v_msg_ServerResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ServerResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_Produce/3}).
-dialyzer({nowarn_function,v_msg_Produce/3}).
v_msg_Produce(#{productName := F1, minimumAmount := F2,
		maximumAmount := F3, minimumUnitaryPrice := F4,
		negotiationPeriod := F5} =
		  M,
	      Path, TrUserData) ->
    v_type_string(F1, [productName | Path], TrUserData),
    v_type_int64(F2, [minimumAmount | Path], TrUserData),
    v_type_int64(F3, [maximumAmount | Path], TrUserData),
    v_type_int64(F4, [minimumUnitaryPrice | Path],
		 TrUserData),
    v_type_int64(F5, [negotiationPeriod | Path],
		 TrUserData),
    lists:foreach(fun (productName) -> ok;
		      (minimumAmount) -> ok;
		      (maximumAmount) -> ok;
		      (minimumUnitaryPrice) -> ok;
		      (negotiationPeriod) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Produce(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [productName, minimumAmount, maximumAmount,
		    minimumUnitaryPrice, negotiationPeriod]
		     -- maps:keys(M),
		   'Produce'},
		  M, Path);
v_msg_Produce(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Produce'}, X, Path).

-compile({nowarn_unused_function,v_msg_Import/3}).
-dialyzer({nowarn_function,v_msg_Import/3}).
v_msg_Import(#{productName := F1, producerName := F2,
	       quantity := F3, unitaryPrice := F4} =
		 M,
	     Path, TrUserData) ->
    v_type_string(F1, [productName | Path], TrUserData),
    v_type_string(F2, [producerName | Path], TrUserData),
    v_type_int64(F3, [quantity | Path], TrUserData),
    v_type_int64(F4, [unitaryPrice | Path], TrUserData),
    lists:foreach(fun (productName) -> ok;
		      (producerName) -> ok;
		      (quantity) -> ok;
		      (unitaryPrice) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Import(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [productName, producerName, quantity, unitaryPrice] --
		     maps:keys(M),
		   'Import'},
		  M, Path);
v_msg_Import(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Import'}, X, Path).

-compile({nowarn_unused_function,v_msg_SubscribeProducer/3}).
-dialyzer({nowarn_function,v_msg_SubscribeProducer/3}).
v_msg_SubscribeProducer(#{username := F1,
			  producerName := F2} =
			    M,
			Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData),
    v_type_string(F2, [producerName | Path], TrUserData),
    lists:foreach(fun (username) -> ok;
		      (producerName) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_SubscribeProducer(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [username, producerName] -- maps:keys(M),
		   'SubscribeProducer'},
		  M, Path);
v_msg_SubscribeProducer(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SubscribeProducer'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_UnsubscribeProducer/3}).
-dialyzer({nowarn_function,v_msg_UnsubscribeProducer/3}).
v_msg_UnsubscribeProducer(#{username := F1,
			    producerName := F2} =
			      M,
			  Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData),
    v_type_string(F2, [producerName | Path], TrUserData),
    lists:foreach(fun (username) -> ok;
		      (producerName) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_UnsubscribeProducer(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [username, producerName] -- maps:keys(M),
		   'UnsubscribeProducer'},
		  M, Path);
v_msg_UnsubscribeProducer(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'UnsubscribeProducer'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_SaleInfo/3}).
-dialyzer({nowarn_function,v_msg_SaleInfo/3}).
v_msg_SaleInfo(#{username := F1, quantity := F2,
		 price := F3} =
		   M,
	       Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData),
    v_type_int64(F2, [quantity | Path], TrUserData),
    v_type_int64(F3, [price | Path], TrUserData),
    lists:foreach(fun (username) -> ok;
		      (quantity) -> ok;
		      (price) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_SaleInfo(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
		   [username, quantity, price] -- maps:keys(M),
		   'SaleInfo'},
		  M, Path);
v_msg_SaleInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SaleInfo'}, X, Path).

-compile({nowarn_unused_function,v_msg_DealerTimeout/3}).
-dialyzer({nowarn_function,v_msg_DealerTimeout/3}).
v_msg_DealerTimeout(#{success := F1, producerName := F2,
		      productName := F3} =
			M,
		    Path, TrUserData) ->
    v_type_bool(F1, [success | Path], TrUserData),
    v_type_string(F2, [producerName | Path], TrUserData),
    v_type_string(F3, [productName | Path], TrUserData),
    case M of
      #{sales := F4} ->
	  if is_list(F4) ->
		 _ = [v_msg_SaleInfo(Elem, [sales | Path], TrUserData)
		      || Elem <- F4],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'SaleInfo'}}, F4,
			       [sales | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (success) -> ok;
		      (producerName) -> ok;
		      (productName) -> ok;
		      (sales) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_DealerTimeout(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [success, producerName, productName] -- maps:keys(M),
		   'DealerTimeout'},
		  M, Path);
v_msg_DealerTimeout(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DealerTimeout'}, X, Path).

-compile({nowarn_unused_function,v_msg_ResponseImport/3}).
-dialyzer({nowarn_function,v_msg_ResponseImport/3}).
v_msg_ResponseImport(#{producerName := F1, sale := F2} =
			 M,
		     Path, TrUserData) ->
    v_type_string(F1, [producerName | Path], TrUserData),
    v_msg_SaleInfo(F2, [sale | Path], TrUserData),
    lists:foreach(fun (producerName) -> ok;
		      (sale) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ResponseImport(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [producerName, sale] -- maps:keys(M), 'ResponseImport'},
		  M, Path);
v_msg_ResponseImport(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseImport'}, X,
		  Path).

-compile({nowarn_unused_function,'v_enum_Authentication.AuthType'/3}).
-dialyzer({nowarn_function,'v_enum_Authentication.AuthType'/3}).
'v_enum_Authentication.AuthType'('REGISTER', _Path,
				 _TrUserData) ->
    ok;
'v_enum_Authentication.AuthType'('LOGIN', _Path,
				 _TrUserData) ->
    ok;
'v_enum_Authentication.AuthType'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Authentication.AuthType'(X, Path,
				 _TrUserData) ->
    mk_type_error({invalid_enum, 'Authentication.AuthType'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_Authentication.UserType'/3}).
-dialyzer({nowarn_function,'v_enum_Authentication.UserType'/3}).
'v_enum_Authentication.UserType'('PRODUCER', _Path,
				 _TrUserData) ->
    ok;
'v_enum_Authentication.UserType'('IMPORTER', _Path,
				 _TrUserData) ->
    ok;
'v_enum_Authentication.UserType'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_Authentication.UserType'(X, Path,
				 _TrUserData) ->
    mk_type_error({invalid_enum, 'Authentication.UserType'},
		  X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'Authentication.AuthType'},
      [{'REGISTER', 0}, {'LOGIN', 1}]},
     {{enum, 'Authentication.UserType'},
      [{'PRODUCER', 0}, {'IMPORTER', 1}]},
     {{msg, 'Authentication'},
      [#{name => type, fnum => 1, rnum => 2,
	 type => {enum, 'Authentication.AuthType'},
	 occurrence => required, opts => []},
       #{name => userType, fnum => 2, rnum => 3,
	 type => {enum, 'Authentication.UserType'},
	 occurrence => required, opts => []},
       #{name => username, fnum => 3, rnum => 4,
	 type => string, occurrence => required, opts => []},
       #{name => password, fnum => 4, rnum => 5,
	 type => string, occurrence => required, opts => []}]},
     {{msg, 'ServerResponse'},
      [#{name => success, fnum => 1, rnum => 2, type => bool,
	 occurrence => required, opts => []}]},
     {{msg, 'Produce'},
      [#{name => productName, fnum => 1, rnum => 2,
	 type => string, occurrence => required, opts => []},
       #{name => minimumAmount, fnum => 2, rnum => 3,
	 type => int64, occurrence => required, opts => []},
       #{name => maximumAmount, fnum => 3, rnum => 4,
	 type => int64, occurrence => required, opts => []},
       #{name => minimumUnitaryPrice, fnum => 4, rnum => 5,
	 type => int64, occurrence => required, opts => []},
       #{name => negotiationPeriod, fnum => 5, rnum => 6,
	 type => int64, occurrence => required, opts => []}]},
     {{msg, 'Import'},
      [#{name => productName, fnum => 1, rnum => 2,
	 type => string, occurrence => required, opts => []},
       #{name => producerName, fnum => 2, rnum => 3,
	 type => string, occurrence => required, opts => []},
       #{name => quantity, fnum => 3, rnum => 4, type => int64,
	 occurrence => required, opts => []},
       #{name => unitaryPrice, fnum => 4, rnum => 5,
	 type => int64, occurrence => required, opts => []}]},
     {{msg, 'SubscribeProducer'},
      [#{name => username, fnum => 1, rnum => 2,
	 type => string, occurrence => required, opts => []},
       #{name => producerName, fnum => 2, rnum => 3,
	 type => string, occurrence => required, opts => []}]},
     {{msg, 'UnsubscribeProducer'},
      [#{name => username, fnum => 1, rnum => 2,
	 type => string, occurrence => required, opts => []},
       #{name => producerName, fnum => 2, rnum => 3,
	 type => string, occurrence => required, opts => []}]},
     {{msg, 'SaleInfo'},
      [#{name => username, fnum => 1, rnum => 2,
	 type => string, occurrence => required, opts => []},
       #{name => quantity, fnum => 2, rnum => 3, type => int64,
	 occurrence => required, opts => []},
       #{name => price, fnum => 3, rnum => 4, type => int64,
	 occurrence => required, opts => []}]},
     {{msg, 'DealerTimeout'},
      [#{name => success, fnum => 1, rnum => 2, type => bool,
	 occurrence => required, opts => []},
       #{name => producerName, fnum => 2, rnum => 3,
	 type => string, occurrence => required, opts => []},
       #{name => productName, fnum => 3, rnum => 4,
	 type => string, occurrence => required, opts => []},
       #{name => sales, fnum => 4, rnum => 5,
	 type => {msg, 'SaleInfo'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'ResponseImport'},
      [#{name => producerName, fnum => 1, rnum => 2,
	 type => string, occurrence => required, opts => []},
       #{name => sale, fnum => 2, rnum => 3,
	 type => {msg, 'SaleInfo'}, occurrence => required,
	 opts => []}]}].


get_msg_names() ->
    ['Authentication', 'ServerResponse', 'Produce',
     'Import', 'SubscribeProducer', 'UnsubscribeProducer',
     'SaleInfo', 'DealerTimeout', 'ResponseImport'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Authentication', 'ServerResponse', 'Produce',
     'Import', 'SubscribeProducer', 'UnsubscribeProducer',
     'SaleInfo', 'DealerTimeout', 'ResponseImport'].


get_enum_names() ->
    ['Authentication.AuthType', 'Authentication.UserType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('Authentication') ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'Authentication.AuthType'},
       occurrence => required, opts => []},
     #{name => userType, fnum => 2, rnum => 3,
       type => {enum, 'Authentication.UserType'},
       occurrence => required, opts => []},
     #{name => username, fnum => 3, rnum => 4,
       type => string, occurrence => required, opts => []},
     #{name => password, fnum => 4, rnum => 5,
       type => string, occurrence => required, opts => []}];
find_msg_def('ServerResponse') ->
    [#{name => success, fnum => 1, rnum => 2, type => bool,
       occurrence => required, opts => []}];
find_msg_def('Produce') ->
    [#{name => productName, fnum => 1, rnum => 2,
       type => string, occurrence => required, opts => []},
     #{name => minimumAmount, fnum => 2, rnum => 3,
       type => int64, occurrence => required, opts => []},
     #{name => maximumAmount, fnum => 3, rnum => 4,
       type => int64, occurrence => required, opts => []},
     #{name => minimumUnitaryPrice, fnum => 4, rnum => 5,
       type => int64, occurrence => required, opts => []},
     #{name => negotiationPeriod, fnum => 5, rnum => 6,
       type => int64, occurrence => required, opts => []}];
find_msg_def('Import') ->
    [#{name => productName, fnum => 1, rnum => 2,
       type => string, occurrence => required, opts => []},
     #{name => producerName, fnum => 2, rnum => 3,
       type => string, occurrence => required, opts => []},
     #{name => quantity, fnum => 3, rnum => 4, type => int64,
       occurrence => required, opts => []},
     #{name => unitaryPrice, fnum => 4, rnum => 5,
       type => int64, occurrence => required, opts => []}];
find_msg_def('SubscribeProducer') ->
    [#{name => username, fnum => 1, rnum => 2,
       type => string, occurrence => required, opts => []},
     #{name => producerName, fnum => 2, rnum => 3,
       type => string, occurrence => required, opts => []}];
find_msg_def('UnsubscribeProducer') ->
    [#{name => username, fnum => 1, rnum => 2,
       type => string, occurrence => required, opts => []},
     #{name => producerName, fnum => 2, rnum => 3,
       type => string, occurrence => required, opts => []}];
find_msg_def('SaleInfo') ->
    [#{name => username, fnum => 1, rnum => 2,
       type => string, occurrence => required, opts => []},
     #{name => quantity, fnum => 2, rnum => 3, type => int64,
       occurrence => required, opts => []},
     #{name => price, fnum => 3, rnum => 4, type => int64,
       occurrence => required, opts => []}];
find_msg_def('DealerTimeout') ->
    [#{name => success, fnum => 1, rnum => 2, type => bool,
       occurrence => required, opts => []},
     #{name => producerName, fnum => 2, rnum => 3,
       type => string, occurrence => required, opts => []},
     #{name => productName, fnum => 3, rnum => 4,
       type => string, occurrence => required, opts => []},
     #{name => sales, fnum => 4, rnum => 5,
       type => {msg, 'SaleInfo'}, occurrence => repeated,
       opts => []}];
find_msg_def('ResponseImport') ->
    [#{name => producerName, fnum => 1, rnum => 2,
       type => string, occurrence => required, opts => []},
     #{name => sale, fnum => 2, rnum => 3,
       type => {msg, 'SaleInfo'}, occurrence => required,
       opts => []}];
find_msg_def(_) -> error.


find_enum_def('Authentication.AuthType') ->
    [{'REGISTER', 0}, {'LOGIN', 1}];
find_enum_def('Authentication.UserType') ->
    [{'PRODUCER', 0}, {'IMPORTER', 1}];
find_enum_def(_) -> error.


enum_symbol_by_value('Authentication.AuthType',
		     Value) ->
    'enum_symbol_by_value_Authentication.AuthType'(Value);
enum_symbol_by_value('Authentication.UserType',
		     Value) ->
    'enum_symbol_by_value_Authentication.UserType'(Value).


enum_value_by_symbol('Authentication.AuthType', Sym) ->
    'enum_value_by_symbol_Authentication.AuthType'(Sym);
enum_value_by_symbol('Authentication.UserType', Sym) ->
    'enum_value_by_symbol_Authentication.UserType'(Sym).


'enum_symbol_by_value_Authentication.AuthType'(0) ->
    'REGISTER';
'enum_symbol_by_value_Authentication.AuthType'(1) ->
    'LOGIN'.


'enum_value_by_symbol_Authentication.AuthType'('REGISTER') ->
    0;
'enum_value_by_symbol_Authentication.AuthType'('LOGIN') ->
    1.

'enum_symbol_by_value_Authentication.UserType'(0) ->
    'PRODUCER';
'enum_symbol_by_value_Authentication.UserType'(1) ->
    'IMPORTER'.


'enum_value_by_symbol_Authentication.UserType'('PRODUCER') ->
    0;
'enum_value_by_symbol_Authentication.UserType'('IMPORTER') ->
    1.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"protos.Authentication">>) -> 'Authentication';
fqbin_to_msg_name(<<"protos.ServerResponse">>) -> 'ServerResponse';
fqbin_to_msg_name(<<"protos.Produce">>) -> 'Produce';
fqbin_to_msg_name(<<"protos.Import">>) -> 'Import';
fqbin_to_msg_name(<<"protos.SubscribeProducer">>) -> 'SubscribeProducer';
fqbin_to_msg_name(<<"protos.UnsubscribeProducer">>) -> 'UnsubscribeProducer';
fqbin_to_msg_name(<<"protos.SaleInfo">>) -> 'SaleInfo';
fqbin_to_msg_name(<<"protos.DealerTimeout">>) -> 'DealerTimeout';
fqbin_to_msg_name(<<"protos.ResponseImport">>) -> 'ResponseImport';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('Authentication') -> <<"protos.Authentication">>;
msg_name_to_fqbin('ServerResponse') -> <<"protos.ServerResponse">>;
msg_name_to_fqbin('Produce') -> <<"protos.Produce">>;
msg_name_to_fqbin('Import') -> <<"protos.Import">>;
msg_name_to_fqbin('SubscribeProducer') -> <<"protos.SubscribeProducer">>;
msg_name_to_fqbin('UnsubscribeProducer') -> <<"protos.UnsubscribeProducer">>;
msg_name_to_fqbin('SaleInfo') -> <<"protos.SaleInfo">>;
msg_name_to_fqbin('DealerTimeout') -> <<"protos.DealerTimeout">>;
msg_name_to_fqbin('ResponseImport') -> <<"protos.ResponseImport">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"protos.Authentication.AuthType">>) ->
    'Authentication.AuthType';
fqbin_to_enum_name(<<"protos.Authentication.UserType">>) ->
    'Authentication.UserType';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('Authentication.AuthType') ->
    <<"protos.Authentication.AuthType">>;
enum_name_to_fqbin('Authentication.UserType') ->
    <<"protos.Authentication.UserType">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> protos.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "protos.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["protos.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["protos"].


get_msg_containment("protos") ->
    ['Authentication', 'DealerTimeout', 'Import', 'Produce',
     'ResponseImport', 'SaleInfo', 'ServerResponse',
     'SubscribeProducer', 'UnsubscribeProducer'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("protos") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("protos") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("protos") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("protos") ->
    ['Authentication.AuthType', 'Authentication.UserType'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"protos.UnsubscribeProducer">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.SubscribeProducer">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.ResponseImport">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.Import">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.DealerTimeout">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.ServerResponse">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.Produce">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.Authentication">>) -> "protos";
get_proto_by_msg_name_as_fqbin(<<"protos.SaleInfo">>) -> "protos";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"protos.Authentication.UserType">>) -> "protos";
get_proto_by_enum_name_as_fqbin(<<"protos.Authentication.AuthType">>) -> "protos";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.11.0".

gpb_version_as_list() ->
    [4,11,0].
